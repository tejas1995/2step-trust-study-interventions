(()=>{"use strict";var t={d:(n,i)=>{for(var e in i)t.o(i,e)&&!t.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:i[e]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n)};t.d({},{o:()=>l});let n="https://tejassrinivasan.pythonanywhere.com/";async function i(t){if(l)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",n+"log");try{return await $.ajax(n+"log",{data:JSON.stringify({project:"2step-trust-study-interventions/"+t.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}let e=null;function o(t,n,i,o,a,l=!0){e&&(clearInterval(e),e=null),i.forEach((t=>t.setAttribute("disabled","true")));let r=document.createElement("div");r.id=`timer_${n.id}`,r.style.fontWeight="bold",r.style.marginTop="10px",n.appendChild(r);let _=t;r.textContent=l?a+` You can make your selection in ${_} second(s).`:a,e=setInterval((()=>{_--,_>=0?r.textContent=l?a+` You can make your selection in ${_} second(s).`:a:(null!==e&&(clearInterval(e),e=null),e=null,n.removeChild(r),i.forEach((t=>t.removeAttribute("disabled"))),o&&o())}),1e3)}const a=t=>new Promise((n=>setTimeout(n,t)));var l=!1,r=[];let _,s,c,d,u,p=-1,v=null,f=-1,g=-1,b=-1,h=-1,m=0,y=5,x=-1,A=1,w=0,I=0,k=0;var T={},E={};let B=-1,N=-1;function S(t,n){if(!t)throw n||"Assertion failed"}function O(t){w+=t,X&&5==w&&(w+=t),0==w?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),w>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==w&&($("#main_box_instructions").hide(),$("#pre_study_survey").show()),8==w&&($("#pre_study_survey").hide(),$("#main_box_experiment").show(),j()),$("#main_box_instructions").children(":not(input)").each(((t,n)=>{$(n).hide()})),$(`#instructions_${w}`).show()}function P(t){d=Date.now(),f=t,S(1==t||2==t,"Invalid option!"),1==t?($("#button_initial_decision_option1").attr("activedecision","true"),$("#button_initial_decision_option2").removeAttr("activedecision")):($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").attr("activedecision","true")),$("#initial_user_confidence_div").show(),$("#button_initial_decision_option1").attr("disabled","true"),$("#button_initial_decision_option2").attr("disabled","true"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function C(t){s=Date.now(),b=t,S(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_initial_confidence_option1").attr("activedecision","true"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision")):2==t?($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").attr("activedecision","true"),$("#button_initial_confidence_option3").removeAttr("activedecision")):($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").attr("activedecision","true")),$("#button_initial_confidence_option1").attr("disabled","true"),$("#button_initial_confidence_option2").attr("disabled","true"),$("#button_initial_confidence_option3").attr("disabled","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let t=v.ai_confidence,n=k;if("user_reported"==Q&&(n=(y-5)/2.5,console.log("Using user reported trust value: ",y)),T={intervention_applied:!1,trust_level_at_start_of_interaction:n},"none"==J||f==v.ai_prediction)console.log("Not applying any intervention."),t=v.ai_confidence;else if("confidence_manip"==J)if("none"==M||"mitigate_undertrust"==M&&n<R||"mitigate_overtrust"==M&&n>R){if(console.log("Applying AI confidence manipulation intervention."),"fixed"==L){let n=Number(v.ai_confidence.replace("%",""))/100,i=Math.min(1,n+H);i=Math.max(.5,i),t=String((100*i).toFixed(0))+"%";let e=(i-n).toFixed(2);console.log("Actual AI confidence: ",v.ai_confidence,", Confidence shown to user: ",t),T.conf_actual=v.ai_confidence,T.conf_displayed=t,T.conf_change=e,T.intervention_applied=!0}}else console.log("Conditions for applying 'confidence manipulation' intervention not satisfied.");else if("ai_explanation"==J)if("none"==M||"mitigate_undertrust"==M&&n<R||"mitigate_overtrust"==M&&n>R){if(console.log("Applying AI explanation intervention."),"fixed"==L){console.log("Showing explanation");let t=v.ai_explanation?v.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(t),$("#ai_explanation_div").show(),T.explanation_shown=t,T.intervention_applied=!0,o(15,document.getElementById("ai_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("ai_contrastive_explanation"==J)if("none"==M||"mitigate_undertrust"==M&&n<R||"mitigate_overtrust"==M&&n>R){if(console.log("Applying AI explanation intervention."),"fixed"==L){console.log("Showing explanation");let t=v.ai_contrastive_explanation?v.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(t),$("#ai_contrastive_explanation_div").show(),T.explanation_shown=t,T.intervention_applied=!0,o(10,document.getElementById("ai_contrastive_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("both_explanation_types"==J){if(S("mitigate_underandovertrust"==M,"Goal for 'both explanation types' intervention should be 'mitigate_underandovertrust'"),n<z){console.log("Applying explanation intervention for undertrust"),console.log("Showing explanation");let t=v.ai_explanation?v.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(t),$("#ai_explanation_div").show(),T.explanation_shown=t,T.intervention_applied=!0,o(15,document.getElementById("ai_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}else if(n>K){console.log("Applying contrastive explanation intervention for overtrust");let t=v.ai_contrastive_explanation?v.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(t),$("#ai_contrastive_explanation_div").show(),T.explanation_shown=t,T.intervention_applied=!0,o(10,document.getElementById("ai_contrastive_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}}else"ai_thinking"==J?("none"==M||"mitigate_undertrust"==M&&n<R||"mitigate_overtrust"==M&&n>R)&&(console.log("Applying AI thinking intervention."),"fixed"==L&&(console.log("Showing AI thinking"),T.intervention_applied=!0,$("#ai_thinking_div").show(),await a(1e4),$("#ai_thinking_div").hide())):"ai_forced_pause"==J?("none"==M||"mitigate_undertrust"==M&&n<R||"mitigate_overtrust"==M&&n>R)&&(console.log("Applying AI forced pause intervention."),"fixed"==L)&&(console.log("Showing AI forced pause"),T.intervention_applied=!0,o(10,document.getElementById("ai_assistance_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please take some time to carefully consider the AI's suggestion.")):"both_pause_types"==J&&(S("mitigate_underandovertrust"==M,"Goal for 'both pause types' intervention should be 'mitigate_underandovertrust'"),n<z?(console.log("Applying AI thinking intervention for undertrust"),console.log("Showing AI thinking"),T.intervention_applied=!0,$("#ai_thinking_div").show(),await a(1e4),$("#ai_thinking_div").hide()):n>K&&(console.log("Applying AI forced pause intervention for overtrust"),console.log("Showing AI forced pause"),T.intervention_applied=!0,o(10,document.getElementById("ai_assistance_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please take some time to carefully consider the AI's suggestion.")));console.log("AI Assistance Intervention Details: ",T),$("#ai_prediction_span").html("Option "+v.ai_prediction),$("#ai_confidence_span").html(t),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function D(t){u=Date.now(),g=t,S(1==t||2==t,"Invalid option!"),1==t?($("#button_final_decision_option1").attr("activedecision","true"),$("#button_final_decision_option2").removeAttr("activedecision")):($("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").attr("activedecision","true")),$("#final_user_confidence_div").show(),$("#button_final_decision_option1").attr("disabled","true"),$("#button_final_decision_option2").attr("disabled","true"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function q(t){c=Date.now(),h=t,S(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_final_confidence_option1").attr("activedecision","true"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision")):2==t?($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").attr("activedecision","true"),$("#button_final_confidence_option3").removeAttr("activedecision")):($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").attr("activedecision","true")),$("#button_final_confidence_option1").attr("disabled","true"),$("#button_final_confidence_option2").attr("disabled","true"),$("#button_final_confidence_option3").attr("disabled","true"),async function(){let t=v.correct_option,n=t==g,i=v.ai_is_correct,e="Correct answer: <b>Option "+t+"</b>.<br>";e+=n?"You picked Option "+g+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+g+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",e+=i?"The AI picked Option "+v.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+v.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",n?(e+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",m+=.1):e+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",e+="<br>",$("#balance").text(`Balance: $${m.toFixed(2)} + $1.0`),$("#result_span").html(e),$("#result_span").show(),X?$("#button_next").show():$("#user_trust_report_div").show(),function(){if("smoothed_confweighted_trust"==Q){let t=Number(v.ai_confidence.replace("%",""))/100,n=v.ai_prediction==v.correct_option?t:-t,i=k;k=V*n+(1-V)*k,E={prev_estimated_trust_level:i,trust_effect:n,new_estimated_trust_level:k},console.log("Old estimated trust level: "+i+", trust effect: "+n+", new estimated trust level: "+k)}}()}()}function j(){if($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").removeAttr("activedecision"),$("#button_initial_decision_option1").removeAttr("disabled"),$("#button_initial_decision_option2").removeAttr("disabled"),$("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled"),$("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").removeAttr("activedecision"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled"),$("#ai_assistance_div").hide(),$("#ai_explanation_div").hide(),$("#ai_contrastive_explanation_div").hide(),$("#ai_thinking_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#user_trust_report_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==p?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*y} / 100.`),$("#range_val").val(y),x=y,p+=1,p>=r.length)return $("#main_box_experiment").hide(),void(l?$("#main_box_end_mock").show():$("#main_box_end").show());if(v=r[p],$("#question_span").html(v.question),$("#option1_span").html(v.option1),$("#option2_span").html(v.option2),v.hasOwnProperty("reward_ratio")){let[t,n]=v.reward_ratio;t=Number(t),n=Number(n),A=t/n}else A=1;_=Date.now(),$("#progress").text(`Progress: ${p+1} / ${r.length}`),o(10,document.getElementById("initial_user_decision_div"),[document.getElementById("button_initial_decision_option1"),document.getElementById("button_initial_decision_option2")],null,"Please read the question and options closely.")}$("#button_instructions_next").on("click",(()=>O(1))),$("#button_instructions_prev").on("click",(()=>O(-1))),$("#button_start_study").on("click",(()=>{-1==B||-1==N?$("#error_message_survey").show():(i({type:"pre_study_survey",pre_survey_answer1:B,pre_survey_answer2:N}),O(1))})),$("#ai_familiarity_1").on("click",(()=>B=1)),$("#ai_familiarity_2").on("click",(()=>B=2)),$("#ai_familiarity_3").on("click",(()=>B=3)),$("#ai_familiarity_4").on("click",(()=>B=4)),$("#ai_usage_1").on("click",(()=>N=1)),$("#ai_usage_2").on("click",(()=>N=2)),$("#ai_usage_3").on("click",(()=>N=3)),$("#button_next").on("click",(()=>{if(-1!=p){let t={question_i:p,user_balance_post_interaction:m,user_trust_val_before:x,user_trust_val_after:y,initial_user_decision:f,final_user_decision:g,initial_user_confidence:b,final_user_confidence:h};t.times={initial_decision:d-_,initial_confidence:s-d,final_decision:u-s,final_confidence:c-u,trust_decision:Date.now()-c},t.question=v,t.count_exited_page=I,t.intervention_details=T,t.trust_effect_prediction_data=E,i(t),I=0}j()})),$("#range_val").on("input change",(function(){y=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*y} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>P(1))),$("#button_initial_decision_option2").on("click",(()=>P(2))),$("#button_initial_confidence_option1").on("click",(()=>C(1))),$("#button_initial_confidence_option2").on("click",(()=>C(2))),$("#button_initial_confidence_option3").on("click",(()=>C(3))),$("#button_final_decision_option1").on("click",(()=>D(1))),$("#button_final_decision_option2").on("click",(()=>D(2))),$("#button_final_confidence_option1").on("click",(()=>q(1))),$("#button_final_confidence_option2").on("click",(()=>q(2))),$("#button_final_confidence_option3").on("click",(()=>q(3)));const Y=new URLSearchParams(window.location.search),G=Y.get("start"),U=Y.get("uid");if(globalThis.url_data=function(t){const n={};for(const[i,e]of t)n[i]=e;return n}(Y.entries()),null!=U){if(globalThis.uid=U,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${Y.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}let F=null;globalThis.uid.includes("343")||globalThis.uid.includes("434")?F=[7,8,9,17,18,19,27,28,29]:globalThis.uid.includes("735")&&(F=[10,11,12,13,14,25,26,27,28,29]);let M=Y.get("intervention_goal");if(null==M&&(M="none"),!["none","mitigate_undertrust","mitigate_overtrust","mitigate_underandovertrust"].includes(M))throw new Error("Invalid AI Assistance Intervention Goal: "+M);let J=Y.get("intervention_type");if(null==J&&(J="none"),!["none","dummy","confidence_manip","ai_explanation","ai_contrastive_explanation","both_explanation_types","ai_thinking","ai_forced_pause","both_pause_types"].includes(J))throw new Error("Invalid AI Assistance Intervention: "+J);let L=Y.get("intervention_strategy");if(null==L&&(L="dummy"),!["dummy","fixed","adaptive"].includes(L))throw new Error("Invalid AI Assistance Intervention Strategy: "+L);let W=Number(Y.get("intervention_threshold"));null==W&&(W=-1);let R=Number(Y.get("intervention_trust_threshold"));null==R&&(R=0);let H=Number(Y.get("intervention_fixedconfchange"));null==H&&(H=0);let z=Number(Y.get("intervention_undertrust_threshold"));null==z&&(z=R);let K=Number(Y.get("intervention_overtrust_threshold"));null==K&&(K=R);let Q=Y.get("user_trust_heuristic");null==Q&&(Q="user_reported");let V=Number(Y.get("smoothing_param"));null==V&&(V=1);let X="true"==Y.get("skip_trust_reporting");null==X&&(X=!1),console.log("AIInterventionGoal: ",M),console.log("AIInterventionType: ",J),console.log("AIInterventionStrategy: ",L),console.log("InterventionALDiffThreshold: ",W),console.log("InterventionTrustThreshold: ",R),console.log("InterventionUndertrustThreshold: ",z),console.log("InterventionOvertrustThreshold: ",K),console.log("InterventionFixedConfChange: ",H),console.log("userTrustHeuristic: ",Q),console.log("skip_trust_reporting: ",X),"mitigate_undertrust"==M?(S(R<=0,"Trust threshold for mitigating undertrust cannot be positive."),S(H>=0,"Confidence change for mitigating undertrust cannot be negative.")):"mitigate_overtrust"==M&&(S(R>=0,"Trust threshold for mitigating overtrust cannot be negative."),S(H<=0,"Confidence change for mitigating overtrust cannot be positive.")),globalThis.url_data.intervention_goal=M,globalThis.url_data.intervention_type=J,globalThis.url_data.intervention_strategy=L,globalThis.url_data.intervention_threshold=W,globalThis.url_data.intervention_fixedconfchange=H,globalThis.url_data.user_trust_heuristic=Q,globalThis.url_data.skip_trust_reporting=X,globalThis.url_data.smoothing_param=V,globalThis.uid.startsWith("demo_paper")&&(l=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{r=t,null!=G&&(p=parseInt(G)-1,console.log("Starting from",p)),O(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let Z=!1;document.onvisibilitychange=()=>{Z||(I+=1,Z=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),Z=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,