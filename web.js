(()=>{"use strict";var t={d:(e,i)=>{for(var n in i)t.o(i,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:i[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{o:()=>i});let e="https://tejassrinivasan.pythonanywhere.com/";var i=!1;let n="https://tejassrinivasan.pythonanywhere.com/",o="user_acceptance_model-logisticregression-0.9347testf1";var c=[];let a,_,l,r,s,d=-1,u=null,p=-1,f=-1,b=-1,h=-1,v=0,g=5,m=1,y=0,w=0,k=0;var A={},x={},O={};let T;function N(t,e){if(!t)throw e||"Assertion failed"}function S(t){y+=t,0==y?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),y>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==y&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),U()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${y}`).show()}function j(t){r=Date.now(),p=t,N(1==t||2==t,"Invalid option!"),1==t?($("#button_initial_decision_option1").attr("activedecision","true"),$("#button_initial_decision_option2").removeAttr("activedecision")):($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").attr("activedecision","true")),$("#initial_user_confidence_div").show(),$("#button_initial_decision_option1").attr("disabled","true"),$("#button_initial_decision_option2").attr("disabled","true"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function I(t){_=Date.now(),b=t,N(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_initial_confidence_option1").attr("activedecision","true"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision")):2==t?($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").attr("activedecision","true"),$("#button_initial_confidence_option3").removeAttr("activedecision")):($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").attr("activedecision","true")),$("#button_initial_confidence_option1").attr("disabled","true"),$("#button_initial_confidence_option2").attr("disabled","true"),$("#button_initial_confidence_option3").attr("disabled","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let t="AI is figuring out its confidence...",e=k;if(Y&&(e=(g-5)/2.5,console.log("Using user reported trust value: ",g)),"none"==q)t=u.ai_confidence;else if("dummy"==q){let i,c={user_ai_initial_agreement:Number(p==u.ai_prediction),user_initial_confidence:b,ai_confidence:Number(u.ai_confidence.replace("%",""))/100,user_current_trust_level:e,timestep:d};console.log("User decision model inputs: ",c);try{i=await $.ajax(n+"get_user_decision_prob",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(c)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}let a=i.pred_probs[0],_=i.X;console.log("User decision model X: ",_),console.log("User's likelihood of going with the AI's prediction: ",a[1]),t=String((100*(_[2]+.1)).toFixed(0))+"%",x={user_decision_model_inputs:c,acceptance_likelihood:a[1]}}else if("confidence_inflation"==q)if(e<0){let i,c=Number(p==u.ai_prediction),a=b,_={user_ai_initial_agreement:c,user_initial_confidence:a,ai_confidence:Number(u.ai_confidence.replace("%",""))/100,user_current_trust_level:e,timestep:d};console.log("User decision model inputs: ",_);try{i=await $.ajax(n+"examine_effect_of_trust_on_decision_making",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(_)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}let l=i.al_diff;console.log("User's likelihood of going with the AI's prediction: ",i.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",i.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",l);let r=i.neutral_trust.acceptance_likelihood,s=!1;if(l>F){s=!0;let _={user_ai_initial_agreement:c,user_initial_confidence:a,user_current_trust_level:e,timestep:d,user_acceptance_likelihood_neutral_trust:r};try{T=await $.ajax(n+"find_best_aiconf_to_display",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(_)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}t=String((100*T.new_conf_to_display).toFixed(0))+"%",x={acceptance_likelihood_results:i,findnewconf_results:T,current_trust_level:e,conf_actual:u.ai_confidence,conf_new:t,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,"acceptance_likelihood-newconf_actualtrust":T.new_conf_acceptance_likelihood,intervention_applied:!0}}else t=u.ai_confidence,s=!1,x={acceptance_likelihood_results:i,current_trust_level:e,conf_actual:u.ai_confidence,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,intervention_applied:!1}}else t=u.ai_confidence,x={intervention_applied:!1};else if("confidence_inflation_fixed"==q)if(e<0&&p!=u.ai_prediction){let i,c=Number(p==u.ai_prediction),a=b,_=Number(u.ai_confidence.replace("%",""))/100,l={user_ai_initial_agreement:c,user_initial_confidence:a,ai_confidence:_,user_current_trust_level:e,timestep:d};console.log("User decision model inputs: ",l);try{i=await $.ajax(n+"examine_effect_of_trust_on_decision_making",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(l)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}let r=i.al_diff;console.log("User's likelihood of going with the AI's prediction: ",i.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",i.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",r),i.neutral_trust.acceptance_likelihood;let s=Math.min(1,_+L);t=String((100*s).toFixed(0))+"%",x={acceptance_likelihood_results:i,current_trust_level:e,conf_actual:u.ai_confidence,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,intervention_applied:!0}}else t=u.ai_confidence,x={intervention_applied:!1};else if("confidence_deflation"==q)if(e>0){let i,c=Number(p==u.ai_prediction),a=b,_={user_ai_initial_agreement:c,user_initial_confidence:a,ai_confidence:Number(u.ai_confidence.replace("%",""))/100,user_current_trust_level:e,timestep:d};console.log("User decision model inputs: ",_);try{i=await $.ajax(n+"examine_effect_of_trust_on_decision_making",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(_)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}let l=i.al_diff;console.log("User's likelihood of going with the AI's prediction: ",i.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",i.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",l);let r=i.neutral_trust.acceptance_likelihood,s=!1;if(l>F){s=!0;let _={user_ai_initial_agreement:c,user_initial_confidence:a,user_current_trust_level:e,timestep:d,user_acceptance_likelihood_neutral_trust:r};try{T=await $.ajax(n+"find_best_aiconf_to_display",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(_)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}t=String((100*T.new_conf_to_display).toFixed(0))+"%",x={acceptance_likelihood_results:i,findnewconf_results:T,current_trust_level:e,conf_actual:u.ai_confidence,conf_new:t,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,"acceptance_likelihood-newconf_actualtrust":T.new_conf_acceptance_likelihood,intervention_applied:!0}}else t=u.ai_confidence,s=!1,x={acceptance_likelihood_results:i,current_trust_level:e,conf_actual:u.ai_confidence,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,intervention_applied:!1}}else t=u.ai_confidence,x={intervention_applied:!1};A={intervention_type:q,actual_ai_confidence:u.ai_confidence,displayed_ai_confidence:t,intervention_details:x},console.log("AI Assistance Intervention Data: ",A),$("#ai_prediction_span").html("Option "+u.ai_prediction),$("#ai_confidence_span").html(t),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function R(t){s=Date.now(),f=t,N(1==t||2==t,"Invalid option!"),1==t?($("#button_final_decision_option1").attr("activedecision","true"),$("#button_final_decision_option2").removeAttr("activedecision")):($("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").attr("activedecision","true")),$("#final_user_confidence_div").show(),$("#button_final_decision_option1").attr("disabled","true"),$("#button_final_decision_option2").attr("disabled","true"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function J(t){l=Date.now(),h=t,N(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_final_confidence_option1").attr("activedecision","true"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision")):2==t?($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").attr("activedecision","true"),$("#button_final_confidence_option3").removeAttr("activedecision")):($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").attr("activedecision","true")),$("#button_final_confidence_option1").attr("disabled","true"),$("#button_final_confidence_option2").attr("disabled","true"),$("#button_final_confidence_option3").attr("disabled","true"),function(){let t=u.correct_option,e=t==f,i=u.ai_is_correct,o="Correct answer: <b>Option "+t+"</b>.<br>";o+=e?"You picked Option "+f+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+f+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",o+=i?"The AI picked Option "+u.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+u.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",e?(o+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",v+=.1):o+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",o+="<br>",async function(){let t,e={initial_user_correctness:Number(p==u.correct_option),ai_correctness:Number(u.ai_prediction==u.correct_option),final_user_correctness:Number(f==u.correct_option),ai_confidence:Number(u.ai_confidence.replace("%",""))/100,user_current_trust_level:k,timestep:d};console.log("Trust effect inputs: ",e);try{t=await $.ajax(n+"get_trust_effect",{data:JSON.stringify({project:"2step-trust-study",model_name:"trust_effect_model-svm_linear-0.4644testmae-0.9095testteda",payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}console.log("Trust effect prediction result: ",t);let i=await t.trust_effect;k+=i,O={model_inputs:e,predicted_trust_effect:i,user_new_trust_level:k}}(),$("#balance").text(`Balance: $${v.toFixed(2)} + $1.0`),$("#result_span").html(o),$("#result_span").show(),$("#how_confident_div").show()}()}function U(){if($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").removeAttr("activedecision"),$("#button_initial_decision_option1").removeAttr("disabled"),$("#button_initial_decision_option2").removeAttr("disabled"),$("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled"),$("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").removeAttr("activedecision"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled"),$("#ai_assistance_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#how_confident_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==d?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*g} / 100.`),$("#range_val").val(g),d+=1,d>=c.length)return $("#main_box_experiment").hide(),void(i?$("#main_box_end_mock").show():$("#main_box_end").show());if(u=c[d],$("#question_span").html(u.question),$("#option1_span").html(u.option1),$("#option2_span").html(u.option2),u.hasOwnProperty("reward_ratio")){let[t,e]=u.reward_ratio;t=Number(t),e=Number(e),m=t/e}else m=1;a=Date.now(),$("#progress").text(`Progress: ${d+1} / ${c.length}`)}$("#button_instructions_next").on("click",(()=>S(1))),$("#button_instructions_prev").on("click",(()=>S(-1))),$("#button_next").on("click",(()=>{if(-1!=d){let t={question_i:d,user_balance_post_interaction:v,user_trust_val:g,initial_user_decision:p,final_user_decision:f,initial_user_confidence:b,final_user_confidence:h};t.times={initial_decision:r-a,initial_confidence:_-r,final_decision:s-_,final_confidence:l-s,trust_decision:Date.now()-l},t.question=u,t.count_exited_page=w,t.ai_assistance_intervention_data=A,t.trust_effect_prediction_data=O,async function(t){if(i)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",e+"log");try{return await $.ajax(e+"log",{data:JSON.stringify({project:"2step-trust-study-interventions/"+t.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}(t),w=0}U()})),$("#range_val").on("input change",(function(){g=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*g} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>j(1))),$("#button_initial_decision_option2").on("click",(()=>j(2))),$("#button_initial_confidence_option1").on("click",(()=>I(1))),$("#button_initial_confidence_option2").on("click",(()=>I(2))),$("#button_initial_confidence_option3").on("click",(()=>I(3))),$("#button_final_decision_option1").on("click",(()=>R(1))),$("#button_final_decision_option2").on("click",(()=>R(2))),$("#button_final_confidence_option1").on("click",(()=>J(1))),$("#button_final_confidence_option2").on("click",(()=>J(2))),$("#button_final_confidence_option3").on("click",(()=>J(3)));const P=new URLSearchParams(window.location.search),D=P.get("start"),E=P.get("uid");if(globalThis.url_data=function(t){const e={};for(const[i,n]of t)e[i]=n;return e}(P.entries()),null!=E){if(globalThis.uid=E,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${P.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}let q=P.get("intervention_type"),F=Number(P.get("intervention_threshold")),L=Number(P.get("intervention_fixedconfincrease")),Y="true"==P.get("use_user_reported_trust_val");if(null==q&&(q="none"),null==F&&(F=-1),null==L&&(L=0),null==Y&&(Y=!1),!["none","dummy","confidence_inflation","confidence_inflation_fixed","confidence_deflation"].includes(q))throw new Error("Invalid AI Assistance Intervention: "+q);globalThis.url_data.intervention_type=q,globalThis.url_data.intervention_threshold=F,globalThis.uid.startsWith("demo_paper")&&(i=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{c=t,null!=D&&(d=parseInt(D)-1,console.log("Starting from",d)),S(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let M=!1;document.onvisibilitychange=()=>{M||(w+=1,M=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),M=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,