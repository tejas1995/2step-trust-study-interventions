(()=>{"use strict";var t={d:(i,n)=>{for(var e in n)t.o(n,e)&&!t.o(i,e)&&Object.defineProperty(i,e,{enumerable:!0,get:n[e]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)};t.d({},{o:()=>n});let i="https://tejassrinivasan.pythonanywhere.com/";var n=!1,e=[];let o,a,r,c,_,l=-1,s=null,d=-1,u=-1,p=-1,f=-1,b=0,v=5,g=-1,h=1,m=0,A=0;var w={},x={};function y(t,i){if(!t)throw i||"Assertion failed"}function I(t){m+=t,J&&5==m&&(m+=t),0==m?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),m>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==m&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),D()),$("#main_box_instructions").children(":not(input)").each(((t,i)=>{$(i).hide()})),$(`#instructions_${m}`).show()}function T(t){c=Date.now(),d=t,y(1==t||2==t,"Invalid option!"),1==t?($("#button_initial_decision_option1").attr("activedecision","true"),$("#button_initial_decision_option2").removeAttr("activedecision")):($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").attr("activedecision","true")),$("#initial_user_confidence_div").show(),$("#button_initial_decision_option1").attr("disabled","true"),$("#button_initial_decision_option2").attr("disabled","true"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function k(t){a=Date.now(),p=t,y(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_initial_confidence_option1").attr("activedecision","true"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision")):2==t?($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").attr("activedecision","true"),$("#button_initial_confidence_option3").removeAttr("activedecision")):($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").attr("activedecision","true")),$("#button_initial_confidence_option1").attr("disabled","true"),$("#button_initial_confidence_option2").attr("disabled","true"),$("#button_initial_confidence_option3").attr("disabled","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let t=s.ai_confidence,i=0;if(G&&(i=(v-5)/2.5,console.log("Using user reported trust value: ",v)),w={intervention_applied:!1,trust_level_at_start_of_interaction:i},"none"==U||d==s.ai_prediction)console.log("Not applying any intervention."),t=s.ai_confidence;else if("confidence_manip"==U)if("none"==q||"mitigate_undertrust"==q&&i<M||"mitigate_overtrust"==q&&i>M){if(console.log("Applying AI confidence manipulation intervention."),"fixed"==E){let i=Number(s.ai_confidence.replace("%",""))/100,n=Math.min(1,i+Y);n=Math.max(.5,n),t=String((100*n).toFixed(0))+"%";let e=(n-i).toFixed(2);console.log("Actual AI confidence: ",s.ai_confidence,", Confidence shown to user: ",t),w.conf_actual=s.ai_confidence,w.conf_displayed=t,w.conf_change=e,w.intervention_applied=!0}}else console.log("Conditions for applying 'confidence manipulation' intervention not satisfied.");else if("ai_explanation"==U)if("none"==q||"mitigate_undertrust"==q&&i<M||"mitigate_overtrust"==q&&i>M){if(console.log("Applying AI explanation intervention."),"fixed"==E){console.log("Showing explanation");let t=s.ai_explanation?s.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(t),$("#ai_explanation_div").show(),w.explanation_shown=t,w.intervention_applied=!0}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");console.log("AI Assistance Intervention Details: ",w),$("#ai_prediction_span").html("Option "+s.ai_prediction),$("#ai_confidence_span").html(t),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function O(t){_=Date.now(),u=t,y(1==t||2==t,"Invalid option!"),1==t?($("#button_final_decision_option1").attr("activedecision","true"),$("#button_final_decision_option2").removeAttr("activedecision")):($("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").attr("activedecision","true")),$("#final_user_confidence_div").show(),$("#button_final_decision_option1").attr("disabled","true"),$("#button_final_decision_option2").attr("disabled","true"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function S(t){r=Date.now(),f=t,y(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_final_confidence_option1").attr("activedecision","true"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision")):2==t?($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").attr("activedecision","true"),$("#button_final_confidence_option3").removeAttr("activedecision")):($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").attr("activedecision","true")),$("#button_final_confidence_option1").attr("disabled","true"),$("#button_final_confidence_option2").attr("disabled","true"),$("#button_final_confidence_option3").attr("disabled","true"),async function(){let t=s.correct_option,i=t==u,n=s.ai_is_correct,e="Correct answer: <b>Option "+t+"</b>.<br>";e+=i?"You picked Option "+u+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+u+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",e+=n?"The AI picked Option "+s.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+s.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",i?(e+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",b+=.1):e+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",e+="<br>",$("#balance").text(`Balance: $${b.toFixed(2)} + $1.0`),$("#result_span").html(e),$("#result_span").show(),J?$("#button_next").show():$("#user_trust_report_div").show()}()}function D(){if($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").removeAttr("activedecision"),$("#button_initial_decision_option1").removeAttr("disabled"),$("#button_initial_decision_option2").removeAttr("disabled"),$("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled"),$("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").removeAttr("activedecision"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled"),$("#ai_assistance_div").hide(),$("#ai_explanation_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#user_trust_report_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==l?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*v} / 100.`),$("#range_val").val(v),g=v,l+=1,l>=e.length)return $("#main_box_experiment").hide(),void(n?$("#main_box_end_mock").show():$("#main_box_end").show());if(s=e[l],$("#question_span").html(s.question),$("#option1_span").html(s.option1),$("#option2_span").html(s.option2),s.hasOwnProperty("reward_ratio")){let[t,i]=s.reward_ratio;t=Number(t),i=Number(i),h=t/i}else h=1;o=Date.now(),$("#progress").text(`Progress: ${l+1} / ${e.length}`)}$("#button_instructions_next").on("click",(()=>I(1))),$("#button_instructions_prev").on("click",(()=>I(-1))),$("#button_next").on("click",(()=>{if(-1!=l){let t={question_i:l,user_balance_post_interaction:b,user_trust_val_before:g,user_trust_val_after:v,initial_user_decision:d,final_user_decision:u,initial_user_confidence:p,final_user_confidence:f};t.times={initial_decision:c-o,initial_confidence:a-c,final_decision:_-a,final_confidence:r-_,trust_decision:Date.now()-r},t.question=s,t.count_exited_page=A,t.intervention_details=w,t.trust_effect_prediction_data=x,async function(t){if(n)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",i+"log");try{return await $.ajax(i+"log",{data:JSON.stringify({project:"2step-trust-study-interventions/"+t.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}(t),A=0}D()})),$("#range_val").on("input change",(function(){v=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*v} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>T(1))),$("#button_initial_decision_option2").on("click",(()=>T(2))),$("#button_initial_confidence_option1").on("click",(()=>k(1))),$("#button_initial_confidence_option2").on("click",(()=>k(2))),$("#button_initial_confidence_option3").on("click",(()=>k(3))),$("#button_final_decision_option1").on("click",(()=>O(1))),$("#button_final_decision_option2").on("click",(()=>O(2))),$("#button_final_confidence_option1").on("click",(()=>S(1))),$("#button_final_confidence_option2").on("click",(()=>S(2))),$("#button_final_confidence_option3").on("click",(()=>S(3)));const N=new URLSearchParams(window.location.search),C=N.get("start"),P=N.get("uid");if(globalThis.url_data=function(t){const i={};for(const[n,e]of t)i[n]=e;return i}(N.entries()),null!=P){if(globalThis.uid=P,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${N.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}let j=null;globalThis.uid.includes("343")||globalThis.uid.includes("434")?j=[7,8,9,17,18,19,27,28,29]:globalThis.uid.includes("735")&&(j=[10,11,12,13,14,25,26,27,28,29]);let q=N.get("intervention_goal");if(null==q&&(q="none"),!["none","mitigate_undertrust","mitigate_overtrust"].includes(q))throw new Error("Invalid AI Assistance Intervention Goal: "+q);let U=N.get("intervention_type");if(null==U&&(U="none"),!["none","dummy","confidence_manip","ai_explanation"].includes(U))throw new Error("Invalid AI Assistance Intervention: "+U);let E=N.get("intervention_strategy");if(null==E&&(E="dummy"),!["dummy","fixed","adaptive"].includes(E))throw new Error("Invalid AI Assistance Intervention Strategy: "+E);let F=Number(N.get("intervention_threshold"));null==F&&(F=-1);let M=Number(N.get("intervention_trust_threshold"));null==M&&(M=0);let Y=Number(N.get("intervention_fixedconfchange"));null==Y&&(Y=0);let G="true"==N.get("use_user_reported_trust_level");null==G&&(G=!1);let J="true"==N.get("skip_trust_reporting");null==J&&(J=!1),console.log("AIInterventionGoal: ",q),console.log("AIInterventionType: ",U),console.log("AIInterventionStrategy: ",E),console.log("InterventionALDiffThreshold: ",F),console.log("InterventionTrustThreshold: ",M),console.log("InterventionFixedConfChange: ",Y),console.log("useUserReportedTrustVal: ",G),console.log("skip_trust_reporting: ",J),"mitigate_undertrust"==q?(y(M<=0,"Trust threshold for mitigating undertrust cannot be positive."),y(Y>=0,"Confidence change for mitigating undertrust cannot be negative.")):"mitigate_overtrust"==q&&(y(M>=0,"Trust threshold for mitigating overtrust cannot be negative."),y(Y<=0,"Confidence change for mitigating overtrust cannot be positive.")),globalThis.url_data.intervention_goal=q,globalThis.url_data.intervention_type=U,globalThis.url_data.intervention_strategy=E,globalThis.url_data.intervention_threshold=F,globalThis.url_data.intervention_fixedconfchange=Y,globalThis.url_data.use_user_reported_trust_level=G,globalThis.uid.startsWith("demo_paper")&&(n=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{e=t,null!=C&&(l=parseInt(C)-1,console.log("Starting from",l)),I(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let L=!1;document.onvisibilitychange=()=>{L||(A+=1,L=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),L=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,