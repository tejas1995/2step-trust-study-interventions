(()=>{"use strict";var t={d:(i,n)=>{for(var e in n)t.o(n,e)&&!t.o(i,e)&&Object.defineProperty(i,e,{enumerable:!0,get:n[e]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)};t.d({},{o:()=>o});let i="https://tejassrinivasan.pythonanywhere.com/",n=null;function e(t,i,e,o,a){n&&(clearInterval(n),n=null),e.forEach((t=>t.setAttribute("disabled","true")));let r=document.createElement("div");r.id=`timer_${i.id}`,r.style.fontWeight="bold",r.style.marginTop="10px",i.appendChild(r);let l=t;r.textContent=a+` You can make your selection in ${l} second(s).`,n=setInterval((()=>{l--,l>=0?r.textContent=a+` You can make your selection in ${l} second(s).`:(null!==n&&(clearInterval(n),n=null),n=null,i.removeChild(r),e.forEach((t=>t.removeAttribute("disabled"))),o&&o())}),1e3)}var o=!1,a=[];let r,l,c,_,s,d=-1,u=null,p=-1,f=-1,b=-1,v=-1,g=0,h=5,m=-1,A=1,x=0,w=0,y=0;var I={},T={};function k(t,i){if(!t)throw i||"Assertion failed"}function E(t){x+=t,V&&5==x&&(x+=t),0==x?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),x>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==x&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),D()),$("#main_box_instructions").children(":not(input)").each(((t,i)=>{$(i).hide()})),$(`#instructions_${x}`).show()}function N(t){_=Date.now(),p=t,k(1==t||2==t,"Invalid option!"),1==t?($("#button_initial_decision_option1").attr("activedecision","true"),$("#button_initial_decision_option2").removeAttr("activedecision")):($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").attr("activedecision","true")),$("#initial_user_confidence_div").show(),$("#button_initial_decision_option1").attr("disabled","true"),$("#button_initial_decision_option2").attr("disabled","true"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function O(t){l=Date.now(),b=t,k(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_initial_confidence_option1").attr("activedecision","true"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision")):2==t?($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").attr("activedecision","true"),$("#button_initial_confidence_option3").removeAttr("activedecision")):($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").attr("activedecision","true")),$("#button_initial_confidence_option1").attr("disabled","true"),$("#button_initial_confidence_option2").attr("disabled","true"),$("#button_initial_confidence_option3").attr("disabled","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let t=u.ai_confidence,i=y;if("user_reported"==R&&(i=(h-5)/2.5,console.log("Using user reported trust value: ",h)),I={intervention_applied:!1,trust_level_at_start_of_interaction:i},"none"==U||p==u.ai_prediction)console.log("Not applying any intervention."),t=u.ai_confidence;else if("confidence_manip"==U)if("none"==Y||"mitigate_undertrust"==Y&&i<G||"mitigate_overtrust"==Y&&i>G){if(console.log("Applying AI confidence manipulation intervention."),"fixed"==F){let i=Number(u.ai_confidence.replace("%",""))/100,n=Math.min(1,i+J);n=Math.max(.5,n),t=String((100*n).toFixed(0))+"%";let e=(n-i).toFixed(2);console.log("Actual AI confidence: ",u.ai_confidence,", Confidence shown to user: ",t),I.conf_actual=u.ai_confidence,I.conf_displayed=t,I.conf_change=e,I.intervention_applied=!0}}else console.log("Conditions for applying 'confidence manipulation' intervention not satisfied.");else if("ai_explanation"==U)if("none"==Y||"mitigate_undertrust"==Y&&i<G||"mitigate_overtrust"==Y&&i>G){if(console.log("Applying AI explanation intervention."),"fixed"==F){console.log("Showing explanation");let t=u.ai_explanation?u.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(t),$("#ai_explanation_div").show(),I.explanation_shown=t,I.intervention_applied=!0,e(15,document.getElementById("ai_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("ai_contrastive_explanation"==U)if("none"==Y||"mitigate_undertrust"==Y&&i<G||"mitigate_overtrust"==Y&&i>G){if(console.log("Applying AI explanation intervention."),"fixed"==F){console.log("Showing explanation");let t=u.ai_contrastive_explanation?u.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(t),$("#ai_contrastive_explanation_div").show(),I.explanation_shown=t,I.intervention_applied=!0,e(10,document.getElementById("ai_contrastive_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");console.log("AI Assistance Intervention Details: ",I),$("#ai_prediction_span").html("Option "+u.ai_prediction),$("#ai_confidence_span").html(t),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function S(t){s=Date.now(),f=t,k(1==t||2==t,"Invalid option!"),1==t?($("#button_final_decision_option1").attr("activedecision","true"),$("#button_final_decision_option2").removeAttr("activedecision")):($("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").attr("activedecision","true")),$("#final_user_confidence_div").show(),$("#button_final_decision_option1").attr("disabled","true"),$("#button_final_decision_option2").attr("disabled","true"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function C(t){c=Date.now(),v=t,k(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_final_confidence_option1").attr("activedecision","true"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision")):2==t?($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").attr("activedecision","true"),$("#button_final_confidence_option3").removeAttr("activedecision")):($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").attr("activedecision","true")),$("#button_final_confidence_option1").attr("disabled","true"),$("#button_final_confidence_option2").attr("disabled","true"),$("#button_final_confidence_option3").attr("disabled","true"),async function(){let t=u.correct_option,i=t==f,n=u.ai_is_correct,e="Correct answer: <b>Option "+t+"</b>.<br>";e+=i?"You picked Option "+f+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+f+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",e+=n?"The AI picked Option "+u.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+u.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",i?(e+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",g+=.1):e+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",e+="<br>",$("#balance").text(`Balance: $${g.toFixed(2)} + $1.0`),$("#result_span").html(e),$("#result_span").show(),V?$("#button_next").show():$("#user_trust_report_div").show(),function(){if("smoothed_confweighted_trust"==R){let t=Number(u.ai_confidence.replace("%",""))/100,i=u.ai_prediction==u.correct_option?t:-t,n=y;y=W*i+(1-W)*y,T={prev_estimated_trust_level:n,trust_effect:i,new_estimated_trust_level:y}}}()}()}function D(){if($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").removeAttr("activedecision"),$("#button_initial_decision_option1").removeAttr("disabled"),$("#button_initial_decision_option2").removeAttr("disabled"),$("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled"),$("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").removeAttr("activedecision"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled"),$("#ai_assistance_div").hide(),$("#ai_explanation_div").hide(),$("#ai_contrastive_explanation_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#user_trust_report_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==d?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*h} / 100.`),$("#range_val").val(h),m=h,d+=1,d>=a.length)return $("#main_box_experiment").hide(),void(o?$("#main_box_end_mock").show():$("#main_box_end").show());if(u=a[d],$("#question_span").html(u.question),$("#option1_span").html(u.option1),$("#option2_span").html(u.option2),u.hasOwnProperty("reward_ratio")){let[t,i]=u.reward_ratio;t=Number(t),i=Number(i),A=t/i}else A=1;r=Date.now(),$("#progress").text(`Progress: ${d+1} / ${a.length}`),e(10,document.getElementById("initial_user_decision_div"),[document.getElementById("button_initial_decision_option1"),document.getElementById("button_initial_decision_option2")],null,"Please read the question and options closely.")}$("#button_instructions_next").on("click",(()=>E(1))),$("#button_instructions_prev").on("click",(()=>E(-1))),$("#button_next").on("click",(()=>{if(-1!=d){let t={question_i:d,user_balance_post_interaction:g,user_trust_val_before:m,user_trust_val_after:h,initial_user_decision:p,final_user_decision:f,initial_user_confidence:b,final_user_confidence:v};t.times={initial_decision:_-r,initial_confidence:l-_,final_decision:s-l,final_confidence:c-s,trust_decision:Date.now()-c},t.question=u,t.count_exited_page=w,t.intervention_details=I,t.trust_effect_prediction_data=T,async function(t){if(o)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",i+"log");try{return await $.ajax(i+"log",{data:JSON.stringify({project:"2step-trust-study-interventions/"+t.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}(t),w=0}D()})),$("#range_val").on("input change",(function(){h=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*h} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>N(1))),$("#button_initial_decision_option2").on("click",(()=>N(2))),$("#button_initial_confidence_option1").on("click",(()=>O(1))),$("#button_initial_confidence_option2").on("click",(()=>O(2))),$("#button_initial_confidence_option3").on("click",(()=>O(3))),$("#button_final_decision_option1").on("click",(()=>S(1))),$("#button_final_decision_option2").on("click",(()=>S(2))),$("#button_final_confidence_option1").on("click",(()=>C(1))),$("#button_final_confidence_option2").on("click",(()=>C(2))),$("#button_final_confidence_option3").on("click",(()=>C(3)));const B=new URLSearchParams(window.location.search),P=B.get("start"),q=B.get("uid");if(globalThis.url_data=function(t){const i={};for(const[n,e]of t)i[n]=e;return i}(B.entries()),null!=q){if(globalThis.uid=q,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${B.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}let j=null;globalThis.uid.includes("343")||globalThis.uid.includes("434")?j=[7,8,9,17,18,19,27,28,29]:globalThis.uid.includes("735")&&(j=[10,11,12,13,14,25,26,27,28,29]);let Y=B.get("intervention_goal");if(null==Y&&(Y="none"),!["none","mitigate_undertrust","mitigate_overtrust"].includes(Y))throw new Error("Invalid AI Assistance Intervention Goal: "+Y);let U=B.get("intervention_type");if(null==U&&(U="none"),!["none","dummy","confidence_manip","ai_explanation","ai_contrastive_explanation"].includes(U))throw new Error("Invalid AI Assistance Intervention: "+U);let F=B.get("intervention_strategy");if(null==F&&(F="dummy"),!["dummy","fixed","adaptive"].includes(F))throw new Error("Invalid AI Assistance Intervention Strategy: "+F);let M=Number(B.get("intervention_threshold"));null==M&&(M=-1);let G=Number(B.get("intervention_trust_threshold"));null==G&&(G=0);let J=Number(B.get("intervention_fixedconfchange"));null==J&&(J=0);let L="true"==B.get("use_user_reported_trust_level");null==L&&(L=!1);let R=B.get("user_trust_heuristic");null==R&&(R="user_reported");let W=Number(B.get("smoothing_param"));null==W&&(W=1);let V="true"==B.get("skip_trust_reporting");null==V&&(V=!1),console.log("AIInterventionGoal: ",Y),console.log("AIInterventionType: ",U),console.log("AIInterventionStrategy: ",F),console.log("InterventionALDiffThreshold: ",M),console.log("InterventionTrustThreshold: ",G),console.log("InterventionFixedConfChange: ",J),console.log("useUserReportedTrustVal: ",L),console.log("skip_trust_reporting: ",V),"mitigate_undertrust"==Y?(k(G<=0,"Trust threshold for mitigating undertrust cannot be positive."),k(J>=0,"Confidence change for mitigating undertrust cannot be negative.")):"mitigate_overtrust"==Y&&(k(G>=0,"Trust threshold for mitigating overtrust cannot be negative."),k(J<=0,"Confidence change for mitigating overtrust cannot be positive.")),globalThis.url_data.intervention_goal=Y,globalThis.url_data.intervention_type=U,globalThis.url_data.intervention_strategy=F,globalThis.url_data.intervention_threshold=M,globalThis.url_data.intervention_fixedconfchange=J,globalThis.url_data.use_user_reported_trust_level=L,globalThis.uid.startsWith("demo_paper")&&(o=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{a=t,null!=P&&(d=parseInt(P)-1,console.log("Starting from",d)),E(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let z=!1;document.onvisibilitychange=()=>{z||(w+=1,z=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),z=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,