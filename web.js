(()=>{"use strict";var t={d:(e,i)=>{for(var n in i)t.o(i,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:i[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{o:()=>i});let e="https://tejassrinivasan.pythonanywhere.com/";var i=!1;let n="https://tejassrinivasan.pythonanywhere.com/",o="user_acceptance_model-logisticregression-0.9347testf1";var a=[];let c,l,_,r,s,d=-1,u=null,p=-1,f=-1,b=-1,v=-1,h=0,g=5,m=-1,w=1,y=0,A=0,k=!1,x=0;var T={},I={};let O;function N(t,e){if(!t)throw e||"Assertion failed"}function S(t){y+=t,H&&5==y&&(y+=t),0==y?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),y>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==y&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),q()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${y}`).show()}function j(t){r=Date.now(),p=t,N(1==t||2==t,"Invalid option!"),1==t?($("#button_initial_decision_option1").attr("activedecision","true"),$("#button_initial_decision_option2").removeAttr("activedecision")):($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").attr("activedecision","true")),$("#initial_user_confidence_div").show(),$("#button_initial_decision_option1").attr("disabled","true"),$("#button_initial_decision_option2").attr("disabled","true"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function D(t){l=Date.now(),b=t,N(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_initial_confidence_option1").attr("activedecision","true"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision")):2==t?($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").attr("activedecision","true"),$("#button_initial_confidence_option3").removeAttr("activedecision")):($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").attr("activedecision","true")),$("#button_initial_confidence_option1").attr("disabled","true"),$("#button_initial_confidence_option2").attr("disabled","true"),$("#button_initial_confidence_option3").attr("disabled","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),async function(){console.log("Getting AI assistance..."),T={};let t=u.ai_confidence,e=x;if(z&&(e=(g-5)/2.5,console.log("Using user reported trust value: ",g)),"none"==Y)t=u.ai_confidence,T={};else if("mitigate_undertrust"==Y)if(e<0){let e=await P(),i=e.al_diff;console.log("User's likelihood of going with the AI's prediction: ",e.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",e.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",i);let n=e.neutral_trust.acceptance_likelihood;if(T.acceptance_likelihood_results=e,k=!1,i>=W&&(k=!0),T.intervention_condition_satisfied=k,console.log("Intervention condition satisfied: ",k),"fixed"==G&&p!=u.ai_prediction)if(console.log("Intervention allowed:",L.includes(d)),L.includes(d))if("confidence_manip"==B){let i=Number(u.ai_confidence.replace("%",""))/100,n=Math.min(1,i+C);t=String((100*n).toFixed(0))+"%";let o=(n-i).toFixed(2);T.conf_actual=u.ai_confidence,T.conf_new=t,T.conf_inflation=o,T["acceptance_likelihood-actualconf_actualtrust"]=e.actual_trust.acceptance_likelihood,T["acceptance_likelihood-actualconf_neutraltrust"]=e.neutral_trust.acceptance_likelihood,T.intervention_applied=!0}else"ai_explanation"==B?T.intervention_applied=!0:"none"==B&&(T.intervention_applied=!1);else console.log("Intervention not allowed at this timestep"),t=u.ai_confidence;else if("adaptive"==G&&(console.log("Intervention condition satisfied: ",k),console.log("Intervention allowed:",L.includes(d)),console.log(d,L),k&&L.includes(d)))if("confidence_manip"==B){O=await R(n),t=String((100*O.new_conf_to_display).toFixed(0))+"%";let i=Number(u.ai_confidence.replace("%",""))/100,o=(O.new_conf_to_display-i).toFixed(2);T.findnewconf_results=O,T.conf_actual=u.ai_confidence,T.conf_new=t,T.conf_inflation=o,T["acceptance_likelihood-actualconf_actualtrust"]=e.actual_trust.acceptance_likelihood,T["acceptance_likelihood-actualconf_neutraltrust"]=e.neutral_trust.acceptance_likelihood,T["acceptance_likelihood-newconf_actualtrust"]=O.new_conf_acceptance_likelihood,T.intervention_applied=!0}else"ai_explanation"==B?T.intervention_applied=!0:"none"==B&&(T.intervention_applied=!1)}else t=u.ai_confidence,T.intervention_applied=!1;else if("mitigate_overtrust"==Y)if(e>0){let e=await P(),i=e.al_diff;console.log("User's likelihood of going with the AI's prediction: ",e.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",e.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",i);let n=e.neutral_trust.acceptance_likelihood;if(T.acceptance_likelihood_results=e,k=!1,i>=W&&(k=!0),T.intervention_condition_satisfied=k,"fixed"==G)if("confidence_manip"==B){let i=Number(u.ai_confidence.replace("%",""))/100,n=Math.max(.5,Math.min(1,i-C));t=String((100*n).toFixed(0))+"%",T.conf_actual=u.ai_confidence,T.conf_new=t,T["acceptance_likelihood-actualconf_actualtrust"]=e.actual_trust.acceptance_likelihood,T["acceptance_likelihood-actualconf_neutraltrust"]=e.neutral_trust.acceptance_likelihood,T.intervention_applied=!0}else"ai_explanation"==B?T.intervention_applied=!0:"none"==B&&(T.intervention_applied=!1);else"adaptive"==G&&k&&("confidence_manip"==B?(O=await R(n),t=String((100*O.new_conf_to_display).toFixed(0))+"%",T.findnewconf_results=O,T.conf_actual=u.ai_confidence,T.conf_new=t,T["acceptance_likelihood-actualconf_actualtrust"]=e.actual_trust.acceptance_likelihood,T["acceptance_likelihood-actualconf_neutraltrust"]=e.neutral_trust.acceptance_likelihood,T["acceptance_likelihood-newconf_actualtrust"]=O.new_conf_acceptance_likelihood,T.intervention_applied=!0):"ai_explanation"==B?T.intervention_applied=!0:"none"==B&&(T.intervention_applied=!1))}else t=u.ai_confidence,T={intervention_applied:!1};T.trust_level_at_start_of_interaction=e,T.actual_ai_confidence=u.ai_confidence,T.displayed_ai_confidence=t,console.log("AI Assistance Intervention Details: ",T),$("#ai_prediction_span").html("Option "+u.ai_prediction),$("#ai_confidence_span").html(t),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}async function P(){let t=Number(p==u.ai_prediction),e=b,i=Number(u.ai_confidence.replace("%",""))/100,a=x;z&&(a=(g-5)/2.5);let c,l={user_ai_initial_agreement:t,user_initial_confidence:e,ai_confidence:i,user_current_trust_level:a,timestep:d};console.log("User decision model inputs: ",l);try{c=await $.ajax(n+"examine_effect_of_trust_on_decision_making",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(l)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}return c}async function R(t){let e=Number(p==u.ai_prediction),i=b,a=(Number(u.ai_confidence.replace("%","")),x);z&&(a=(g-5)/2.5);let c={user_ai_initial_agreement:e,user_initial_confidence:i,user_current_trust_level:a,timestep:d,user_acceptance_likelihood_neutral_trust:t};try{O=await $.ajax(n+"find_best_aiconf_to_display",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(c)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}return O}function J(t){s=Date.now(),f=t,N(1==t||2==t,"Invalid option!"),1==t?($("#button_final_decision_option1").attr("activedecision","true"),$("#button_final_decision_option2").removeAttr("activedecision")):($("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").attr("activedecision","true")),$("#final_user_confidence_div").show(),$("#button_final_decision_option1").attr("disabled","true"),$("#button_final_decision_option2").attr("disabled","true"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function U(t){_=Date.now(),v=t,N(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_final_confidence_option1").attr("activedecision","true"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision")):2==t?($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").attr("activedecision","true"),$("#button_final_confidence_option3").removeAttr("activedecision")):($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").attr("activedecision","true")),$("#button_final_confidence_option1").attr("disabled","true"),$("#button_final_confidence_option2").attr("disabled","true"),$("#button_final_confidence_option3").attr("disabled","true"),async function(){let t=u.correct_option,e=t==f,i=u.ai_is_correct,o="Correct answer: <b>Option "+t+"</b>.<br>";o+=e?"You picked Option "+f+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+f+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",o+=i?"The AI picked Option "+u.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+u.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",e?(o+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",h+=.1):o+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",o+="<br>",$("#balance").text(`Balance: $${h.toFixed(2)} + $1.0`),$("#result_span").html(o),$("#result_span").show(),H?$("#button_next").show():$("#user_trust_report_div").show(),I=await async function(){let t,e={initial_user_correctness:Number(p==u.correct_option),ai_correctness:Number(u.ai_prediction==u.correct_option),final_user_correctness:Number(f==u.correct_option),ai_confidence:Number(u.ai_confidence.replace("%",""))/100,user_current_trust_level:x,timestep:d};console.log("Trust effect inputs: ",e);try{t=await $.ajax(n+"get_trust_effect",{data:JSON.stringify({project:"2step-trust-study",model_name:"trust_effect_model-svm_linear-0.4644testmae-0.9095testteda",payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}console.log("Trust effect prediction result: ",t);let i=await t.trust_effect;return x+=i,I={model_inputs:e,predicted_trust_effect:i,user_new_trust_level:x}}()}()}function q(){if($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").removeAttr("activedecision"),$("#button_initial_decision_option1").removeAttr("disabled"),$("#button_initial_decision_option2").removeAttr("disabled"),$("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled"),$("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").removeAttr("activedecision"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled"),$("#ai_assistance_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#user_trust_report_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==d?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*g} / 100.`),$("#range_val").val(g),m=g,d+=1,d>=a.length)return $("#main_box_experiment").hide(),void(i?$("#main_box_end_mock").show():$("#main_box_end").show());if(u=a[d],$("#question_span").html(u.question),$("#option1_span").html(u.option1),$("#option2_span").html(u.option2),u.hasOwnProperty("reward_ratio")){let[t,e]=u.reward_ratio;t=Number(t),e=Number(e),w=t/e}else w=1;c=Date.now(),$("#progress").text(`Progress: ${d+1} / ${a.length}`)}$("#button_instructions_next").on("click",(()=>S(1))),$("#button_instructions_prev").on("click",(()=>S(-1))),$("#button_next").on("click",(()=>{if(-1!=d){let t={question_i:d,user_balance_post_interaction:h,user_trust_val_before:m,user_trust_val_after:g,initial_user_decision:p,final_user_decision:f,initial_user_confidence:b,final_user_confidence:v};t.times={initial_decision:r-c,initial_confidence:l-r,final_decision:s-l,final_confidence:_-s,trust_decision:Date.now()-_},t.question=u,t.count_exited_page=A,t.intervention_details=T,t.trust_effect_prediction_data=I,async function(t){if(i)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",e+"log");try{return await $.ajax(e+"log",{data:JSON.stringify({project:"2step-trust-study-interventions/"+t.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}(t),A=0}q()})),$("#range_val").on("input change",(function(){g=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*g} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>j(1))),$("#button_initial_decision_option2").on("click",(()=>j(2))),$("#button_initial_confidence_option1").on("click",(()=>D(1))),$("#button_initial_confidence_option2").on("click",(()=>D(2))),$("#button_initial_confidence_option3").on("click",(()=>D(3))),$("#button_final_decision_option1").on("click",(()=>J(1))),$("#button_final_decision_option2").on("click",(()=>J(2))),$("#button_final_confidence_option1").on("click",(()=>U(1))),$("#button_final_confidence_option2").on("click",(()=>U(2))),$("#button_final_confidence_option3").on("click",(()=>U(3)));const E=new URLSearchParams(window.location.search),F=E.get("start"),M=E.get("uid");if(globalThis.url_data=function(t){const e={};for(const[i,n]of t)e[i]=n;return e}(E.entries()),null!=M){if(globalThis.uid=M,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${E.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}let L=[];globalThis.uid.includes("343")||globalThis.uid.includes("434")?L=[7,8,9,17,18,19,27,28,29]:globalThis.uid.includes("735")&&(L=[10,11,12,13,14,25,26,27,28,29]);let Y=E.get("intervention_goal");if(null==Y&&(Y="none"),!["none","mitigate_undertrust","mitigate_overtrust"].includes(Y))throw new Error("Invalid AI Assistance Intervention Goal: "+Y);let B=E.get("intervention_type");if(null==B&&(B="none"),!["none","dummy","confidence_manip","ai_explanation"].includes(B))throw new Error("Invalid AI Assistance Intervention: "+B);let G=E.get("intervention_strategy");if(null==G&&(G="dummy"),!["dummy","fixed","adaptive"].includes(G))throw new Error("Invalid AI Assistance Intervention Strategy: "+G);let W=Number(E.get("intervention_threshold"));null==W&&(W=-1);let C=Number(E.get("intervention_fixedconfchange"));null==C&&(C=0);let z="true"==E.get("use_user_reported_trust_level");null==z&&(z=!1);let H="true"==E.get("skip_trust_reporting");null==H&&(H=!1),globalThis.url_data.intervention_goal=Y,globalThis.url_data.intervention_type=B,globalThis.url_data.intervention_strategy=G,globalThis.url_data.intervention_threshold=W,globalThis.url_data.intervention_fixedconfchange=C,globalThis.url_data.use_user_reported_trust_level=z,globalThis.uid.startsWith("demo_paper")&&(i=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{a=t,null!=F&&(d=parseInt(F)-1,console.log("Starting from",d)),S(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let K=!1;document.onvisibilitychange=()=>{K||(A+=1,K=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),K=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,