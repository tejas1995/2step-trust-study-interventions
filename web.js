(()=>{"use strict";var t={d:(i,e)=>{for(var n in e)t.o(e,n)&&!t.o(i,n)&&Object.defineProperty(i,n,{enumerable:!0,get:e[n]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)};t.d({},{o:()=>e});let i="https://tejassrinivasan.pythonanywhere.com/";var e=!1;let n="https://tejassrinivasan.pythonanywhere.com/",o="user_acceptance_model-logisticregression-0.9347testf1";var c=[];let a,_,r,s,l,d,u=-1,p=null,f=-1,b=-1,v=-1,h=-1,m=0,g=1,w=0,y=0,A=0;var k={},x={},O={};let T;function I(t,i){if(!t)throw i||"Assertion failed"}function N(t){w+=t,0==w?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),w>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==w&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),P()),$("#main_box_instructions").children(":not(input)").each(((t,i)=>{$(i).hide()})),$(`#instructions_${w}`).show()}function S(t){l=Date.now(),f=t,I(1==t||2==t,"Invalid option!"),1==t?($("#button_initial_decision_option1").attr("activedecision","true"),$("#button_initial_decision_option2").removeAttr("activedecision")):($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").attr("activedecision","true")),$("#initial_user_confidence_div").show(),$("#button_initial_decision_option1").attr("disabled","true"),$("#button_initial_decision_option2").attr("disabled","true"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function j(t){r=Date.now(),v=t,I(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_initial_confidence_option1").attr("activedecision","true"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision")):2==t?($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").attr("activedecision","true"),$("#button_initial_confidence_option3").removeAttr("activedecision")):($("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").attr("activedecision","true")),$("#button_initial_confidence_option1").attr("disabled","true"),$("#button_initial_confidence_option2").attr("disabled","true"),$("#button_initial_confidence_option3").attr("disabled","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let t="AI is figuring out its confidence...";if("none"==E)t=p.ai_confidence;else if("dummy"==E){let i,e={user_ai_initial_agreement:Number(f==p.ai_prediction),user_initial_confidence:v,ai_confidence:Number(p.ai_confidence.replace("%",""))/100,user_current_trust_level:A,timestep:u};console.log("User decision model inputs: ",e);try{i=await $.ajax(n+"get_user_decision_prob",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}let c=i.pred_probs[0],a=i.X;console.log("User decision model X: ",a),console.log("User's likelihood of going with the AI's prediction: ",c[1]),t=String((100*(a[2]+.1)).toFixed(0))+"%",x={user_decision_model_inputs:e,acceptance_likelihood:c[1]}}else if("confidence_inflation"==E)if(A<0){let i,e=Number(f==p.ai_prediction),c=v,a={user_ai_initial_agreement:e,user_initial_confidence:c,ai_confidence:Number(p.ai_confidence.replace("%",""))/100,user_current_trust_level:A,timestep:u};console.log("User decision model inputs: ",a);try{i=await $.ajax(n+"examine_effect_of_trust_on_decision_making",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(a)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}let _=i.al_diff;console.log("User's likelihood of going with the AI's prediction: ",i.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",i.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",_);let r=i.neutral_trust.acceptance_likelihood,s=!1;if(_>Y){s=!0;let a={user_ai_initial_agreement:e,user_initial_confidence:c,user_current_trust_level:A,timestep:u,user_acceptance_likelihood_neutral_trust:r};try{T=await $.ajax(n+"find_best_aiconf_to_display",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(a)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}t=String((100*T.new_conf_to_display).toFixed(0))+"%",x={acceptance_likelihood_results:i,findnewconf_results:T,current_trust_level:A,conf_actual:p.ai_confidence,conf_new:t,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,"acceptance_likelihood-newconf_actualtrust":T.new_conf_acceptance_likelihood,intervention_applied:!0}}else t=p.ai_confidence,s=!1,x={acceptance_likelihood_results:i,current_trust_level:A,conf_actual:p.ai_confidence,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,intervention_applied:!1}}else t=p.ai_confidence,x={intervention_applied:!1};k={intervention_type:E,actual_ai_confidence:p.ai_confidence,displayed_ai_confidence:t,intervention_details:x},console.log("AI Assistance Intervention Data: ",k),$("#ai_prediction_span").html("Option "+p.ai_prediction),$("#ai_confidence_span").html(t),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function R(t){d=Date.now(),b=t,I(1==t||2==t,"Invalid option!"),1==t?($("#button_final_decision_option1").attr("activedecision","true"),$("#button_final_decision_option2").removeAttr("activedecision")):($("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").attr("activedecision","true")),$("#final_user_confidence_div").show(),$("#button_final_decision_option1").attr("disabled","true"),$("#button_final_decision_option2").attr("disabled","true"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function D(t){s=Date.now(),h=t,I(1==t||2==t||3==t,"Invalid option!"),1==t?($("#button_final_confidence_option1").attr("activedecision","true"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision")):2==t?($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").attr("activedecision","true"),$("#button_final_confidence_option3").removeAttr("activedecision")):($("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").attr("activedecision","true")),$("#button_final_confidence_option1").attr("disabled","true"),$("#button_final_confidence_option2").attr("disabled","true"),$("#button_final_confidence_option3").attr("disabled","true"),function(){let t=p.correct_option,i=t==b,e=p.ai_is_correct,o="Correct answer: <b>Option "+t+"</b>.<br>";o+=i?"You picked Option "+b+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+b+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",o+=e?"The AI picked Option "+p.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+p.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",i?(o+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",m+=.1):o+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",o+="<br>",async function(){let t,i={initial_user_correctness:Number(f==p.correct_option),ai_correctness:Number(p.ai_prediction==p.correct_option),final_user_correctness:Number(b==p.correct_option),ai_confidence:Number(p.ai_confidence.replace("%",""))/100,user_current_trust_level:A,timestep:u};console.log("Trust effect inputs: ",i);try{t=await $.ajax(n+"get_trust_effect",{data:JSON.stringify({project:"2step-trust-study",model_name:"trust_effect_model-svm_linear-0.4644testmae-0.9095testteda",payload:JSON.stringify(i)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}console.log("Trust effect prediction result: ",t);let e=await t.trust_effect;A+=e,O={model_inputs:i,predicted_trust_effect:e,user_new_trust_level:A}}(),$("#balance").text(`Balance: $${m.toFixed(2)} + $1.0`),$("#result_span").html(o),$("#result_span").show(),$("#how_confident_div").show()}()}function P(){if($("#button_initial_decision_option1").removeAttr("activedecision"),$("#button_initial_decision_option2").removeAttr("activedecision"),$("#button_initial_decision_option1").removeAttr("disabled"),$("#button_initial_decision_option2").removeAttr("disabled"),$("#button_initial_confidence_option1").removeAttr("activedecision"),$("#button_initial_confidence_option2").removeAttr("activedecision"),$("#button_initial_confidence_option3").removeAttr("activedecision"),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled"),$("#button_final_decision_option1").removeAttr("activedecision"),$("#button_final_decision_option2").removeAttr("activedecision"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_confidence_option1").removeAttr("activedecision"),$("#button_final_confidence_option2").removeAttr("activedecision"),$("#button_final_confidence_option3").removeAttr("activedecision"),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled"),$("#ai_assistance_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#how_confident_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==u?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*a} / 100.`),$("#range_val").val(a),u+=1,u>=c.length)return $("#main_box_experiment").hide(),void(e?$("#main_box_end_mock").show():$("#main_box_end").show());if(p=c[u],$("#question_span").html(p.question),$("#option1_span").html(p.option1),$("#option2_span").html(p.option2),p.hasOwnProperty("reward_ratio")){let[t,i]=p.reward_ratio;t=Number(t),i=Number(i),g=t/i}else g=1;_=Date.now(),$("#progress").text(`Progress: ${u+1} / ${c.length}`)}$("#button_instructions_next").on("click",(()=>N(1))),$("#button_instructions_prev").on("click",(()=>N(-1))),$("#button_next").on("click",(()=>{if(-1!=u){let t={question_i:u,user_balance_post_interaction:m,user_trust_val:a,initial_user_decision:f,final_user_decision:b,initial_user_confidence:v,final_user_confidence:h};t.times={initial_decision:l-_,initial_confidence:r-l,final_decision:d-r,final_confidence:s-d,trust_decision:Date.now()-s},t.question=p,t.count_exited_page=y,t.ai_assistance_intervention_data=k,t.trust_effect_prediction_data=O,async function(t){if(e)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",i+"log");try{return await $.ajax(i+"log",{data:JSON.stringify({project:"2step-trust-study/"+t.url_data.study_id,uid:globalThis.uid+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}(t),y=0}P()})),$("#range_val").on("input change",(function(){a=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*a} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>S(1))),$("#button_initial_decision_option2").on("click",(()=>S(2))),$("#button_initial_confidence_option1").on("click",(()=>j(1))),$("#button_initial_confidence_option2").on("click",(()=>j(2))),$("#button_initial_confidence_option3").on("click",(()=>j(3))),$("#button_final_decision_option1").on("click",(()=>R(1))),$("#button_final_decision_option2").on("click",(()=>R(2))),$("#button_final_confidence_option1").on("click",(()=>D(1))),$("#button_final_confidence_option2").on("click",(()=>D(2))),$("#button_final_confidence_option3").on("click",(()=>D(3)));const J=new URLSearchParams(window.location.search),U=J.get("start"),q=J.get("uid");if(globalThis.url_data=function(t){const i={};for(const[e,n]of t)i[e]=n;return i}(J.entries()),null!=q){if(globalThis.uid=q,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${J.get("prolific_queue_name")}_${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}let E=J.get("intervention_type"),Y=Number(J.get("intervention_threshold"));if(null==E&&(E="none"),null==Y&&(Y=-1),!["none","dummy","confidence_inflation"].includes(E))throw new Error("Invalid AI Assistance Intervention: "+E);globalThis.url_data.intervention_type=E,globalThis.url_data.intervention_threshold=Y,globalThis.uid.startsWith("demo_paper")&&(e=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{c=t,null!=U&&(u=parseInt(U)-1,console.log("Starting from",u)),N(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let F=!1;document.onvisibilitychange=()=>{F||(y+=1,F=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),F=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxvQkFDWkQsUUFBUUMsSUFBSTZDLFdBQVdFLEtBQ3ZCSyxPQUFPQyxTQUFTcUIsUUFBUSxJQUUxQkMsTUFBTUMsSUFDSjFILEVBQU8wSCxFQUNjLE1BQWpCckIsSUFDQTlGLEVBQWFvSCxTQUFTdEIsR0FBaUIsRUFDdkN4RCxRQUFRQyxJQUFJLGdCQUFpQnZDLElBR2pDa0IsRUFBa0IsR0FDbEJFLEVBQUUsMEJBQTBCRyxPQUM1QkgsRUFBRSxpQ0FBaUNLLE1BQU0sSUFHN0NhLFFBQVFDLElBQUksNkJBQThCNkMsV0FBV0UsS0FFckQsSUFBSStCLEdBQWUsRUFDbkJDLFNBQVNDLG1CQUFxQixLQUNyQkYsSUFDRDVHLEdBQXFCLEVBQ3JCNEcsR0FBZSxFQUNUakMsV0FBV0UsSUFBS3NCLFdBQVcsU0FDN0JZLE1BQU0sZ0ZBRVZILEdBQWUsRSIsInNvdXJjZXMiOlsid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy8uL3NyYy9jb25uZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0IHsgREVWTU9ERSB9IGZyb20gJy4vZ2xvYmFscydcbmltcG9ydCB7IE1PQ0tNT0RFIH0gZnJvbSAnLi9tYWluJ1xuXG5sZXQgU0VSVkVSX0xPR19ST09UID0gREVWTU9ERSA/IFwiaHR0cDovLzEyNy4wLjAuMTo1MDAwL1wiIDogXCJodHRwczovL3RlamFzc3Jpbml2YXNhbi5weXRob25hbnl3aGVyZS5jb20vXCJcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRfZGF0YSgpOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIGluY2x1ZGUgdGltZXN0YW1wIHNvIHRoYXQgdGhpbmdzIGRvbid0IGdldCBjYWNoZWRcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5nZXRKU09OKFxuICAgICAgICBgYmFrZWRfcXVldWVzLyR7Z2xvYmFsVGhpcy51aWR9Lmpzb24/dD0ke0RhdGUubm93KCl9YCxcbiAgICApXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZ19kYXRhKGRhdGEpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmIChNT0NLTU9ERSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxvZ2dlZCAobW9jaylcIiwgZGF0YSlcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxuICAgIGRhdGFbXCJ1cmxfZGF0YVwiXSA9IGdsb2JhbFRoaXMudXJsX2RhdGFcbiAgICBjb25zb2xlLmxvZyhcIkRhdGFcIilcbiAgICBpZiAoIShcInN0dWR5X2lkXCIgaW4gZGF0YVsndXJsX2RhdGEnXSkpIHtcbiAgICAgICAgZGF0YVsndXJsX2RhdGEnXVtcInN0dWR5X2lkXCJdID0gXCJ0cmlhbHJ1bl9zdHVkaWVzXCJcbiAgICB9XG4gICAgZGF0YVtcInVybF9kYXRhXCJdW1wicXVldWVfaWRcIl0gPSBnbG9iYWxUaGlzLnVpZFxuICAgIGNvbnNvbGUubG9nKFwibG9nZ2VkXCIsIGRhdGEpXG4gICAgY29uc29sZS5sb2coXCJMb2dnaW5nIHRvXCIsIFNFUlZFUl9MT0dfUk9PVCArIFwibG9nXCIpXG5cbiAgICB0cnkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxuICAgICAgICAgICAgU0VSVkVSX0xPR19ST09UICsgXCJsb2dcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IFwiMnN0ZXAtdHJ1c3Qtc3R1ZHkvXCIrZGF0YVsndXJsX2RhdGEnXVsnc3R1ZHlfaWQnXSxcbiAgICAgICAgICAgICAgICAgICAgdWlkOiBnbG9iYWxUaGlzLnVpZCtcIl9cIitkYXRhWyd1cmxfZGF0YSddWydwcm9saWZpY19pZCddLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cbn0iLCJpbXBvcnQgeyBERVZNT0RFIH0gZnJvbSBcIi4vZ2xvYmFsc1wiXG5leHBvcnQgdmFyIFVJRDogc3RyaW5nXG5leHBvcnQgdmFyIE1PQ0tNT0RFOiBib29sZWFuID0gZmFsc2VcbmltcG9ydCB7IGxvYWRfZGF0YSwgbG9nX2RhdGEgfSBmcm9tICcuL2Nvbm5lY3RvcidcbmltcG9ydCB7IHBhcmFtc1RvT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHNcIlxuLy9pbXBvcnQgeyBnZXRfdXNlcl90cnVzdF9lZmZlY3QsIGdldF9hZGp1c3RlZF9haV9jb25maWRlbmNlfSBmcm9tIFwiLi9ydW5fdXNlcl9tb2RlbHNcIlxuXG5sZXQgVVNFUl9NT0RFTFNfUk9PVCA9IFwiaHR0cHM6Ly90ZWphc3NyaW5pdmFzYW4ucHl0aG9uYW55d2hlcmUuY29tL1wiXG5sZXQgdXNlcl9kZWNpc2lvbl9tb2RlbCA9IFwidXNlcl9hY2NlcHRhbmNlX21vZGVsLWxvZ2lzdGljcmVncmVzc2lvbi0wLjkzNDd0ZXN0ZjFcIlxubGV0IHRydXN0X2VmZmVjdF9tb2RlbCA9IFwidHJ1c3RfZWZmZWN0X21vZGVsLXN2bV9saW5lYXItMC40NjQ0dGVzdG1hZS0wLjkwOTV0ZXN0dGVkYVwiXG5cbnZhciBkYXRhOiBhbnlbXSA9IFtdXG5sZXQgcXVlc3Rpb25faSA9IC0xXG5sZXQgcXVlc3Rpb246IGFueSA9IG51bGxcbmxldCBpbml0aWFsX3VzZXJfZGVjaXNpb246IG51bWJlciA9IC0xXG5sZXQgZmluYWxfdXNlcl9kZWNpc2lvbjogbnVtYmVyID0gLTFcbmxldCBpbml0aWFsX3VzZXJfY29uZmlkZW5jZTogbnVtYmVyID0gLTFcbmxldCBmaW5hbF91c2VyX2NvbmZpZGVuY2U6IG51bWJlciA9IC0xXG5sZXQgYmFsYW5jZSA9IDBcbmxldCB1c2VyX3RydXN0OiBudW1iZXJcbmxldCBiZXRfdmFsX3JhdGlvOiBudW1iZXIgPSAxXG5sZXQgdGltZV9xdWVzdGlvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV9maW5hbF9kZWNpc2lvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV90cnVzdF9kZWNpc2lvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV9pbml0aWFsX2NvbmZpZGVuY2Vfc3RhcnQ6IG51bWJlclxubGV0IHRpbWVfZmluYWxfY29uZmlkZW5jZV9zdGFydDogbnVtYmVyXG5sZXQgaW5zdHJ1Y3Rpb25faTogbnVtYmVyID0gMFxubGV0IGNvdW50X2V4aXRlZF9wYWdlOiBudW1iZXIgPSAwXG5cbmxldCB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWw6IG51bWJlciA9IDBcblxudmFyIGFsbF91c2VyX2ludGVyYWN0aW9ucyA9IFtdXG52YXIgYWlfYXNzaXN0YW5jZV9pbnRlcnZlbnRpb25fZGF0YSA9IHt9XG52YXIgaW50ZXJ2ZW50aW9uX2RldGFpbHMgPSB7fVxudmFyIHRydXN0X2VmZmVjdF9wcmVkaWN0aW9uX2RhdGEgPSB7fVxubGV0IGZpbmRuZXdjb25mX3Jlc3VsdDogYW55XG5cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBtZXNzYWdlIHx8IFwiQXNzZXJ0aW9uIGZhaWxlZFwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbmV4dF9pbnN0cnVjdGlvbnMoaW5jcmVtZW50OiBudW1iZXIpIHtcbiAgICBpbnN0cnVjdGlvbl9pICs9IGluY3JlbWVudFxuXG4gICAgaWYgKGluc3RydWN0aW9uX2kgPT0gMCkge1xuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfcHJldlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX3ByZXZcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgfVxuICAgIGlmIChpbnN0cnVjdGlvbl9pID49IDYpIHtcbiAgICAgICAgJChcIiNpbnN0cnVjdGlvbnNfYW5kX2RlY29yYXRpb25zXCIpLnNob3coKVxuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS52YWwoXCJTdGFydCBzdHVkeVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIjaW5zdHJ1Y3Rpb25zX2FuZF9kZWNvcmF0aW9uc1wiKS5oaWRlKClcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikudmFsKFwiTmV4dFwiKVxuICAgIH1cbiAgICBpZiAoaW5zdHJ1Y3Rpb25faSA9PSA3KSB7XG4gICAgICAgICQoXCIjbWFpbl9ib3hfaW5zdHJ1Y3Rpb25zXCIpLmhpZGUoKVxuICAgICAgICAkKFwiI21haW5fYm94X2V4cGVyaW1lbnRcIikuc2hvdygpXG4gICAgICAgIG5leHRfcXVlc3Rpb24oKVxuICAgIH1cblxuICAgICQoXCIjbWFpbl9ib3hfaW5zdHJ1Y3Rpb25zXCIpLmNoaWxkcmVuKFwiOm5vdChpbnB1dClcIikuZWFjaCgoXywgZWwpID0+IHtcbiAgICAgICAgJChlbCkuaGlkZSgpXG4gICAgfSlcbiAgICAkKGAjaW5zdHJ1Y3Rpb25zXyR7aW5zdHJ1Y3Rpb25faX1gKS5zaG93KClcbn1cbiQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbmV4dF9pbnN0cnVjdGlvbnMoKzEpKVxuJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX3ByZXZcIikub24oXCJjbGlja1wiLCAoKSA9PiBuZXh0X2luc3RydWN0aW9ucygtMSkpXG5cbiQoXCIjYnV0dG9uX25leHRcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgaWYgKHF1ZXN0aW9uX2kgIT0gLTEpIHtcbiAgICAgICAgbGV0IGxvZ2dlZF9kYXRhID0ge1xuICAgICAgICAgICAgXCJxdWVzdGlvbl9pXCI6IHF1ZXN0aW9uX2ksXG4gICAgICAgICAgICBcInVzZXJfYmFsYW5jZV9wb3N0X2ludGVyYWN0aW9uXCI6IGJhbGFuY2UsXG4gICAgICAgICAgICBcInVzZXJfdHJ1c3RfdmFsXCI6IHVzZXJfdHJ1c3QsXG4gICAgICAgICAgICBcImluaXRpYWxfdXNlcl9kZWNpc2lvblwiOiBpbml0aWFsX3VzZXJfZGVjaXNpb24sXG4gICAgICAgICAgICBcImZpbmFsX3VzZXJfZGVjaXNpb25cIjogZmluYWxfdXNlcl9kZWNpc2lvbixcbiAgICAgICAgICAgIFwiaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VcIjogaW5pdGlhbF91c2VyX2NvbmZpZGVuY2UsXG4gICAgICAgICAgICBcImZpbmFsX3VzZXJfY29uZmlkZW5jZVwiOiBmaW5hbF91c2VyX2NvbmZpZGVuY2UsXG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZWRfZGF0YVsndGltZXMnXSA9IHtcbiAgICAgICAgICAgIFwiaW5pdGlhbF9kZWNpc2lvblwiOiB0aW1lX2luaXRpYWxfY29uZmlkZW5jZV9zdGFydCAtIHRpbWVfcXVlc3Rpb25fc3RhcnQsXG4gICAgICAgICAgICBcImluaXRpYWxfY29uZmlkZW5jZVwiOiB0aW1lX2ZpbmFsX2RlY2lzaW9uX3N0YXJ0IC0gdGltZV9pbml0aWFsX2NvbmZpZGVuY2Vfc3RhcnQsXG4gICAgICAgICAgICBcImZpbmFsX2RlY2lzaW9uXCI6IHRpbWVfZmluYWxfY29uZmlkZW5jZV9zdGFydCAtIHRpbWVfZmluYWxfZGVjaXNpb25fc3RhcnQsXG4gICAgICAgICAgICBcImZpbmFsX2NvbmZpZGVuY2VcIjogdGltZV90cnVzdF9kZWNpc2lvbl9zdGFydCAtIHRpbWVfZmluYWxfY29uZmlkZW5jZV9zdGFydCxcbiAgICAgICAgICAgIFwidHJ1c3RfZGVjaXNpb25cIjogRGF0ZS5ub3coKSAtIHRpbWVfdHJ1c3RfZGVjaXNpb25fc3RhcnQsXG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VkX2RhdGFbJ3F1ZXN0aW9uJ10gPSBxdWVzdGlvblxuICAgICAgICBsb2dnZWRfZGF0YVsnY291bnRfZXhpdGVkX3BhZ2UnXSA9IGNvdW50X2V4aXRlZF9wYWdlXG4gICAgICAgIGxvZ2dlZF9kYXRhWydhaV9hc3Npc3RhbmNlX2ludGVydmVudGlvbl9kYXRhJ10gPSBhaV9hc3Npc3RhbmNlX2ludGVydmVudGlvbl9kYXRhXG4gICAgICAgIGxvZ2dlZF9kYXRhWyd0cnVzdF9lZmZlY3RfcHJlZGljdGlvbl9kYXRhJ10gPSB0cnVzdF9lZmZlY3RfcHJlZGljdGlvbl9kYXRhXG4gICAgICAgIGxvZ19kYXRhKGxvZ2dlZF9kYXRhKVxuICAgICAgICBjb3VudF9leGl0ZWRfcGFnZSA9IDBcblxuICAgIH1cbiAgICBuZXh0X3F1ZXN0aW9uKClcbn0pO1xuXG4kKCcjcmFuZ2VfdmFsJykub24oJ2lucHV0IGNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB1c2VyX3RydXN0ID0gKCQodGhpcykudmFsKCkhIGFzIG51bWJlcilcbiAgICAkKFwiI3JhbmdlX3RleHRcIikudGV4dChgQWZ0ZXIgdGhpcyBpbnRlcmFjdGlvbiwgeW91ciBjdXJyZW50IHRydXN0IGluIHRoZSBBSTogJHt1c2VyX3RydXN0ICogMTB9IC8gMTAwLmApXG4gICAgJChcIiNidXR0b25fbmV4dFwiKS5zaG93KClcbn0pO1xuXG5mdW5jdGlvbiBtYWtlX2luaXRpYWxfdXNlcl9kZWNpc2lvbihvcHRpb24pIHtcbiAgICB0aW1lX2luaXRpYWxfY29uZmlkZW5jZV9zdGFydCA9IERhdGUubm93KClcbiAgICBpbml0aWFsX3VzZXJfZGVjaXNpb24gPSBvcHRpb25cbiAgICBhc3NlcnQob3B0aW9uID09IDEgfHwgb3B0aW9uID09IDIsIFwiSW52YWxpZCBvcHRpb24hXCIpXG4gICAgaWYgKG9wdGlvbiA9PSAxKSB7XG4gICAgICAgICQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMVwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgfVxuICAgICQoXCIjaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VfZGl2XCIpLnNob3coKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMVwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24yXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbn1cbiQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMVwiKS5vbihcImNsaWNrXCIsICgpID0+IG1ha2VfaW5pdGlhbF91c2VyX2RlY2lzaW9uKDEpKVxuJChcIiNidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24yXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbWFrZV9pbml0aWFsX3VzZXJfZGVjaXNpb24oMikpXG5cbmZ1bmN0aW9uIGdldF9pbml0aWFsX3VzZXJfY29uZmlkZW5jZShjb25mX2xldmVsKSB7XG4gICAgdGltZV9maW5hbF9kZWNpc2lvbl9zdGFydCA9IERhdGUubm93KClcbiAgICBpbml0aWFsX3VzZXJfY29uZmlkZW5jZSA9IGNvbmZfbGV2ZWxcbiAgICBhc3NlcnQoY29uZl9sZXZlbCA9PSAxIHx8IGNvbmZfbGV2ZWwgPT0gMiB8fCBjb25mX2xldmVsID09IDMsIFwiSW52YWxpZCBvcHRpb24hXCIpXG4gICAgaWYgKGNvbmZfbGV2ZWwgPT0gMSkge1xuICAgICAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICB9IGVsc2UgaWYgKGNvbmZfbGV2ZWwgPT0gMikge1xuICAgICAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjJcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuICAgICAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcbiAgICB9XG5cbiAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjJcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24xXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpICAgIFxuXG4gICAgZ2V0X2FpX2Fzc2lzdGFuY2UoKVxufVxuJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjFcIikub24oXCJjbGlja1wiLCAoKSA9PiBnZXRfaW5pdGlhbF91c2VyX2NvbmZpZGVuY2UoMSkpXG4kKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMlwiKS5vbihcImNsaWNrXCIsICgpID0+IGdldF9pbml0aWFsX3VzZXJfY29uZmlkZW5jZSgyKSlcbiQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gZ2V0X2luaXRpYWxfdXNlcl9jb25maWRlbmNlKDMpKVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfYWlfYXNzaXN0YW5jZSgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkdldHRpbmcgQUkgYXNzaXN0YW5jZS4uLlwiKVxuXG4gICAgbGV0IGRpc3BsYXllZF9haV9jb25maWRlbmNlID0gXCJBSSBpcyBmaWd1cmluZyBvdXQgaXRzIGNvbmZpZGVuY2UuLi5cIlxuICAgIGlmIChBSUludGVydmVudGlvblR5cGUgPT0gXCJub25lXCIpIHtcbiAgICAgICAgLy8gTm8gaW50ZXJ2ZW50aW9uLCBqdXN0IHNob3cgdGhlIEFJIGFzc2lzdGFuY2UgdGhhdCBpcyBhbHJlYWR5IHBvcHVsYXRlZCBpbiB0aGUgc3BhblxuICAgICAgICBkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSA9IHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl1cblxuICAgIH0gZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwiZHVtbXlcIikge1xuICAgICAgICAvLyBQcmVwYXJlIGlucHV0IHZhcmlhYmxlcyBmb3IgdXNlciBkZWNpc2lvbiBtb2RlbFxuICAgICAgICBsZXQgdXNlcl9haV9pbml0aWFsX2FncmVlbWVudCA9IE51bWJlcihpbml0aWFsX3VzZXJfZGVjaXNpb24gPT0gcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSlcbiAgICAgICAgbGV0IHVzZXJfaW5pdGlhbF9jb25maWRlbmNlID0gaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VcbiAgICAgICAgbGV0IGFpX2NvbmZpZGVuY2UgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfY29uZmlkZW5jZVwiXS5yZXBsYWNlKFwiJVwiLCBcIlwiKSkgLyAxMDBcbiAgICAgICAgbGV0IHVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzID0ge1xuICAgICAgICAgICAgXCJ1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50XCI6IHVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQsXG4gICAgICAgICAgICBcInVzZXJfaW5pdGlhbF9jb25maWRlbmNlXCI6IHVzZXJfaW5pdGlhbF9jb25maWRlbmNlLFxuICAgICAgICAgICAgXCJhaV9jb25maWRlbmNlXCI6IGFpX2NvbmZpZGVuY2UsXG4gICAgICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgICAgICBcInRpbWVzdGVwXCI6IHF1ZXN0aW9uX2ksXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJVc2VyIGRlY2lzaW9uIG1vZGVsIGlucHV0czogXCIsIHVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzKVxuXG4gICAgICAgIGxldCByZXN1bHQ6IGFueVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxuICAgICAgICAgICAgICAgIFVTRVJfTU9ERUxTX1JPT1QgKyBcImdldF91c2VyX2RlY2lzaW9uX3Byb2JcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IFwiMnN0ZXAtdHJ1c3Qtc3R1ZHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU6IHVzZXJfZGVjaXNpb25fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeSh1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SIVwiKVxuICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgdXNlcl9kZWNpc2lvbl9wcmVkX3Byb2JzID0gcmVzdWx0W1wicHJlZF9wcm9ic1wiXVswXVxuICAgICAgICBsZXQgWCA9IHJlc3VsdFtcIlhcIl1cbiAgICAgICAgY29uc29sZS5sb2coXCJVc2VyIGRlY2lzaW9uIG1vZGVsIFg6IFwiLCBYKVxuICAgICAgICBjb25zb2xlLmxvZyhcIlVzZXIncyBsaWtlbGlob29kIG9mIGdvaW5nIHdpdGggdGhlIEFJJ3MgcHJlZGljdGlvbjogXCIsIHVzZXJfZGVjaXNpb25fcHJlZF9wcm9ic1sxXSlcbiAgICAgICAgXG4gICAgICAgIGRpc3BsYXllZF9haV9jb25maWRlbmNlID0gU3RyaW5nKCgoWFsyXSArIDAuMSkgKiAxMDApLnRvRml4ZWQoMCkpICsgXCIlXCIgIC8vIENvbmZpZGVuY2UgaW4gQUkncyBwcmVkaWN0aW9uXG4gICAgICAgIGludGVydmVudGlvbl9kZXRhaWxzID0ge1xuICAgICAgICAgICAgXCJ1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0c1wiOiB1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cyxcbiAgICAgICAgICAgIFwiYWNjZXB0YW5jZV9saWtlbGlob29kXCI6IHVzZXJfZGVjaXNpb25fcHJlZF9wcm9ic1sxXSxcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwiY29uZmlkZW5jZV9pbmZsYXRpb25cIikge1xuICAgICAgICBpZiAodXNlcl9jdXJyZW50X3RydXN0X2xldmVsIDwgMCkge1xuICAgICAgICAgICAgLy8gUHJlcGFyZSBpbnB1dCB2YXJpYWJsZXMgZm9yIHVzZXIgZGVjaXNpb24gbW9kZWxcbiAgICAgICAgICAgIGxldCB1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50ID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdKVxuICAgICAgICAgICAgbGV0IHVzZXJfaW5pdGlhbF9jb25maWRlbmNlID0gaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VcbiAgICAgICAgICAgIGxldCBhaV9jb25maWRlbmNlID0gTnVtYmVyKHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0ucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwXG4gICAgICAgICAgICBsZXQgdXNlcl9kZWNpc2lvbl9tb2RlbF9pbnB1dHMgPSB7XG4gICAgICAgICAgICAgICAgXCJ1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50XCI6IHVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQsXG4gICAgICAgICAgICAgICAgXCJ1c2VyX2luaXRpYWxfY29uZmlkZW5jZVwiOiB1c2VyX2luaXRpYWxfY29uZmlkZW5jZSxcbiAgICAgICAgICAgICAgICBcImFpX2NvbmZpZGVuY2VcIjogYWlfY29uZmlkZW5jZSxcbiAgICAgICAgICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgICAgICAgICAgXCJ0aW1lc3RlcFwiOiBxdWVzdGlvbl9pLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVc2VyIGRlY2lzaW9uIG1vZGVsIGlucHV0czogXCIsIHVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzKVxuXG4gICAgICAgICAgICBsZXQgYWxkaWZmX3Jlc3VsdDogYW55XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGFsZGlmZl9yZXN1bHQgPSBhd2FpdCAkLmFqYXgoXG4gICAgICAgICAgICAgICAgICAgIFVTRVJfTU9ERUxTX1JPT1QgKyBcImV4YW1pbmVfZWZmZWN0X29mX3RydXN0X29uX2RlY2lzaW9uX21ha2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCIyc3RlcC10cnVzdC1zdHVkeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU6IHVzZXJfZGVjaXNpb25fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkodXNlcl9kZWNpc2lvbl9tb2RlbF9pbnB1dHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRVJST1IhXCIpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGFsX2RpZmYgPSBhbGRpZmZfcmVzdWx0W1wiYWxfZGlmZlwiXVxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlJlc3VsdHM6IFwiLCBhbGRpZmZfcmVzdWx0KVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVc2VyJ3MgbGlrZWxpaG9vZCBvZiBnb2luZyB3aXRoIHRoZSBBSSdzIHByZWRpY3Rpb246IFwiLCBhbGRpZmZfcmVzdWx0W1wiYWN0dWFsX3RydXN0XCJdW1wiYWNjZXB0YW5jZV9saWtlbGlob29kXCJdKVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVc2VyJ3MgbGlrZWxpaG9vZCBvZiBnb2luZyB3aXRoIHRoZSBBSSdzIHByZWRpY3Rpb24gd2l0aCBuZXV0cmFsIHRydXN0OiBcIiwgYWxkaWZmX3Jlc3VsdFtcIm5ldXRyYWxfdHJ1c3RcIl1bXCJhY2NlcHRhbmNlX2xpa2VsaWhvb2RcIl0pXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFjY2VwdGFuY2UgTGlrZWxpaG9vZCBEaWZmOiBcIiwgYWxfZGlmZilcbiAgICAgICAgICAgIGxldCB1c2VyX2FjY2VwdGFuY2VfbGlrZWxpaG9vZF9uZXV0cmFsX3RydXN0ID0gYWxkaWZmX3Jlc3VsdFtcIm5ldXRyYWxfdHJ1c3RcIl1bXCJhY2NlcHRhbmNlX2xpa2VsaWhvb2RcIl1cblxuICAgICAgICAgICAgbGV0IGludGVydmVudGlvbl9hcHBsaWVkID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChhbF9kaWZmID4gSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2FwcGxpZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgLy9GaW5kIG5lYXJlc3QgQUkgY29uZmlkZW5jZSB3aXRoIG1pbmltaXppbmcgQUxEaWZmXG4gICAgICAgICAgICAgICAgbGV0IGZpbmRuZXdjb25mX2lucHV0X3ZhcmlhYmxlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50XCI6IHVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIFwidXNlcl9pbml0aWFsX2NvbmZpZGVuY2VcIjogdXNlcl9pbml0aWFsX2NvbmZpZGVuY2UsXG4gICAgICAgICAgICAgICAgICAgIFwidXNlcl9jdXJyZW50X3RydXN0X2xldmVsXCI6IHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgXCJ0aW1lc3RlcFwiOiBxdWVzdGlvbl9pLFxuICAgICAgICAgICAgICAgICAgICBcInVzZXJfYWNjZXB0YW5jZV9saWtlbGlob29kX25ldXRyYWxfdHJ1c3RcIjogdXNlcl9hY2NlcHRhbmNlX2xpa2VsaWhvb2RfbmV1dHJhbF90cnVzdCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZmluZG5ld2NvbmZfcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgVVNFUl9NT0RFTFNfUk9PVCArIFwiZmluZF9iZXN0X2FpY29uZl90b19kaXNwbGF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBcIjJzdGVwLXRydXN0LXN0dWR5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU6IHVzZXJfZGVjaXNpb25fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KGZpbmRuZXdjb25mX2lucHV0X3ZhcmlhYmxlcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRVJST1IhXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpc3BsYXllZF9haV9jb25maWRlbmNlID0gU3RyaW5nKChmaW5kbmV3Y29uZl9yZXN1bHRbJ25ld19jb25mX3RvX2Rpc3BsYXknXSAqIDEwMCkudG9GaXhlZCgwKSkgKyBcIiVcIiAgLy8gQ29uZmlkZW5jZSBpbiBBSSdzIHByZWRpY3Rpb25cbiAgICAgICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlscyA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJhY2NlcHRhbmNlX2xpa2VsaWhvb2RfcmVzdWx0c1wiOiBhbGRpZmZfcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBcImZpbmRuZXdjb25mX3Jlc3VsdHNcIjogZmluZG5ld2NvbmZfcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBcImN1cnJlbnRfdHJ1c3RfbGV2ZWxcIjogdXNlcl9jdXJyZW50X3RydXN0X2xldmVsLFxuICAgICAgICAgICAgICAgICAgICBcImNvbmZfYWN0dWFsXCI6IHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0sXG4gICAgICAgICAgICAgICAgICAgIFwiY29uZl9uZXdcIjogZGlzcGxheWVkX2FpX2NvbmZpZGVuY2UsXG4gICAgICAgICAgICAgICAgICAgIFwiYWNjZXB0YW5jZV9saWtlbGlob29kLWFjdHVhbGNvbmZfYWN0dWFsdHJ1c3RcIjogYWxkaWZmX3Jlc3VsdFtcImFjdHVhbF90cnVzdFwiXVtcImFjY2VwdGFuY2VfbGlrZWxpaG9vZFwiXSxcbiAgICAgICAgICAgICAgICAgICAgXCJhY2NlcHRhbmNlX2xpa2VsaWhvb2QtYWN0dWFsY29uZl9uZXV0cmFsdHJ1c3RcIjogYWxkaWZmX3Jlc3VsdFtcIm5ldXRyYWxfdHJ1c3RcIl1bXCJhY2NlcHRhbmNlX2xpa2VsaWhvb2RcIl0sXG4gICAgICAgICAgICAgICAgICAgIFwiYWNjZXB0YW5jZV9saWtlbGlob29kLW5ld2NvbmZfYWN0dWFsdHJ1c3RcIjogZmluZG5ld2NvbmZfcmVzdWx0W1wibmV3X2NvbmZfYWNjZXB0YW5jZV9saWtlbGlob29kXCJdLFxuICAgICAgICAgICAgICAgICAgICBcImludGVydmVudGlvbl9hcHBsaWVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheWVkX2FpX2NvbmZpZGVuY2UgPSBxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdXG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2FwcGxpZWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgIGludGVydmVudGlvbl9kZXRhaWxzID0ge1xuICAgICAgICAgICAgICAgICAgICBcImFjY2VwdGFuY2VfbGlrZWxpaG9vZF9yZXN1bHRzXCI6IGFsZGlmZl9yZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIFwiY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgIFwiY29uZl9hY3R1YWxcIjogcXVlc3Rpb24hW1wiYWlfY29uZmlkZW5jZVwiXSxcbiAgICAgICAgICAgICAgICAgICAgXCJhY2NlcHRhbmNlX2xpa2VsaWhvb2QtYWN0dWFsY29uZl9hY3R1YWx0cnVzdFwiOiBhbGRpZmZfcmVzdWx0W1wiYWN0dWFsX3RydXN0XCJdW1wiYWNjZXB0YW5jZV9saWtlbGlob29kXCJdLFxuICAgICAgICAgICAgICAgICAgICBcImFjY2VwdGFuY2VfbGlrZWxpaG9vZC1hY3R1YWxjb25mX25ldXRyYWx0cnVzdFwiOiBhbGRpZmZfcmVzdWx0W1wibmV1dHJhbF90cnVzdFwiXVtcImFjY2VwdGFuY2VfbGlrZWxpaG9vZFwiXSxcbiAgICAgICAgICAgICAgICAgICAgXCJpbnRlcnZlbnRpb25fYXBwbGllZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BsYXllZF9haV9jb25maWRlbmNlID0gcXVlc3Rpb24hW1wiYWlfY29uZmlkZW5jZVwiXVxuICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHMgPSB7XCJpbnRlcnZlbnRpb25fYXBwbGllZFwiOiBmYWxzZX1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFpX2Fzc2lzdGFuY2VfaW50ZXJ2ZW50aW9uX2RhdGEgPSB7XG4gICAgICAgIFwiaW50ZXJ2ZW50aW9uX3R5cGVcIjogQUlJbnRlcnZlbnRpb25UeXBlLFxuICAgICAgICBcImFjdHVhbF9haV9jb25maWRlbmNlXCI6IHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0sXG4gICAgICAgIFwiZGlzcGxheWVkX2FpX2NvbmZpZGVuY2VcIjogZGlzcGxheWVkX2FpX2NvbmZpZGVuY2UsXG4gICAgICAgIFwiaW50ZXJ2ZW50aW9uX2RldGFpbHNcIjogaW50ZXJ2ZW50aW9uX2RldGFpbHMsXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiQUkgQXNzaXN0YW5jZSBJbnRlcnZlbnRpb24gRGF0YTogXCIsIGFpX2Fzc2lzdGFuY2VfaW50ZXJ2ZW50aW9uX2RhdGEpXG5cbiAgICAkKFwiI2FpX3ByZWRpY3Rpb25fc3BhblwiKS5odG1sKFwiT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSlcbiAgICAkKFwiI2FpX2NvbmZpZGVuY2Vfc3BhblwiKS5odG1sKGRpc3BsYXllZF9haV9jb25maWRlbmNlKVxuXG4gICAgJChcIiNhaV9hc3Npc3RhbmNlX2RpdlwiKS5zaG93KClcbiAgICAkKFwiI2ZpbmFsX3VzZXJfZGVjaXNpb25fZGl2XCIpLnNob3coKVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfdHJ1c3RfZWZmZWN0KCkge1xuICAgIC8vIEdldCB0cnVzdCBlZmZlY3QgZm9yIHRoaXMgaW50ZXJhY3Rpb25cbiAgICBsZXQgaW5pdGlhbF91c2VyX2NvcnJlY3RuZXNzID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXSlcbiAgICBsZXQgYWlfY29ycmVjdG5lc3MgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSA9PSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXSlcbiAgICBsZXQgZmluYWxfdXNlcl9jb3JyZWN0bmVzcyA9IE51bWJlcihmaW5hbF91c2VyX2RlY2lzaW9uID09IHF1ZXN0aW9uIVtcImNvcnJlY3Rfb3B0aW9uXCJdKVxuICAgIGxldCBhaV9jb25maWRlbmNlID0gTnVtYmVyKHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0ucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwXG4gICAgbGV0IHRydXN0X2VmZmVjdF9pbnB1dHMgPSB7XG4gICAgICAgIFwiaW5pdGlhbF91c2VyX2NvcnJlY3RuZXNzXCI6IGluaXRpYWxfdXNlcl9jb3JyZWN0bmVzcyxcbiAgICAgICAgXCJhaV9jb3JyZWN0bmVzc1wiOiBhaV9jb3JyZWN0bmVzcyxcbiAgICAgICAgXCJmaW5hbF91c2VyX2NvcnJlY3RuZXNzXCI6IGZpbmFsX3VzZXJfY29ycmVjdG5lc3MsXG4gICAgICAgIFwiYWlfY29uZmlkZW5jZVwiOiBhaV9jb25maWRlbmNlLFxuICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgIFwidGltZXN0ZXBcIjogcXVlc3Rpb25faSxcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJUcnVzdCBlZmZlY3QgaW5wdXRzOiBcIiwgdHJ1c3RfZWZmZWN0X2lucHV0cylcbiAgICAvL2xldCB0cnVzdF9lZmZlY3QgPSBnZXRfdXNlcl90cnVzdF9lZmZlY3QodHJ1c3RfZWZmZWN0X2lucHV0cylcbiAgICBsZXQgcmVzdWx0OiBhbnlcbiAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCAkLmFqYXgoXG4gICAgICAgICAgICBVU0VSX01PREVMU19ST09UICsgXCJnZXRfdHJ1c3RfZWZmZWN0XCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBcIjJzdGVwLXRydXN0LXN0dWR5XCIsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU6IHRydXN0X2VmZmVjdF9tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkodHJ1c3RfZWZmZWN0X2lucHV0cyksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRVJST1IhXCIpXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCJUcnVzdCBlZmZlY3QgcHJlZGljdGlvbiByZXN1bHQ6IFwiLCByZXN1bHQpXG4gICAgbGV0IHRydXN0X2VmZmVjdCA9IGF3YWl0IHJlc3VsdFtcInRydXN0X2VmZmVjdFwiXVxuXG4gICAgdXNlcl9jdXJyZW50X3RydXN0X2xldmVsID0gdXNlcl9jdXJyZW50X3RydXN0X2xldmVsICsgdHJ1c3RfZWZmZWN0XG4gICAgdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSA9IHtcbiAgICAgICAgXCJtb2RlbF9pbnB1dHNcIjogdHJ1c3RfZWZmZWN0X2lucHV0cyxcbiAgICAgICAgXCJwcmVkaWN0ZWRfdHJ1c3RfZWZmZWN0XCI6IHRydXN0X2VmZmVjdCxcbiAgICAgICAgXCJ1c2VyX25ld190cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIG1ha2VfZmluYWxfdXNlcl9kZWNpc2lvbihvcHRpb24pIHtcbiAgICB0aW1lX2ZpbmFsX2NvbmZpZGVuY2Vfc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgZmluYWxfdXNlcl9kZWNpc2lvbiA9IG9wdGlvblxuICAgIGFzc2VydChvcHRpb24gPT0gMSB8fCBvcHRpb24gPT0gMiwgXCJJbnZhbGlkIG9wdGlvbiFcIilcbiAgICBpZiAob3B0aW9uID09IDEpIHtcbiAgICAgICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uMVwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgfVxuICAgICQoXCIjZmluYWxfdXNlcl9jb25maWRlbmNlX2RpdlwiKS5zaG93KClcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24xXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24yXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbn1cbiQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjFcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24oMSkpXG4kKFwiI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24yXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbWFrZV9maW5hbF91c2VyX2RlY2lzaW9uKDIpKVxuXG5mdW5jdGlvbiBnZXRfZmluYWxfdXNlcl9jb25maWRlbmNlKGNvbmZfbGV2ZWwpIHtcbiAgICB0aW1lX3RydXN0X2RlY2lzaW9uX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgIGZpbmFsX3VzZXJfY29uZmlkZW5jZSA9IGNvbmZfbGV2ZWxcbiAgICBhc3NlcnQoY29uZl9sZXZlbCA9PSAxIHx8IGNvbmZfbGV2ZWwgPT0gMiB8fCBjb25mX2xldmVsID09IDMsIFwiSW52YWxpZCBvcHRpb24hXCIpXG4gICAgaWYgKGNvbmZfbGV2ZWwgPT0gMSkge1xuICAgICAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuICAgICAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICB9IGVsc2UgaWYgKGNvbmZfbGV2ZWwgPT0gMikge1xuICAgICAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uMlwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uMlwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcbiAgICB9XG5cbiAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uMlwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICBzaG93X3Jlc3VsdCgpXG59XG4kKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikub24oXCJjbGlja1wiLCAoKSA9PiBnZXRfZmluYWxfdXNlcl9jb25maWRlbmNlKDEpKVxuJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gZ2V0X2ZpbmFsX3VzZXJfY29uZmlkZW5jZSgyKSlcbiQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5vbihcImNsaWNrXCIsICgpID0+IGdldF9maW5hbF91c2VyX2NvbmZpZGVuY2UoMykpXG5cblxuZnVuY3Rpb24gc2hvd19yZXN1bHQoKSB7XG5cbiAgICBsZXQgY29ycmVjdF9vcHRpb246IG51bWJlciA9IHF1ZXN0aW9uIVtcImNvcnJlY3Rfb3B0aW9uXCJdXG4gICAgbGV0IHVzZXJfaXNfY29ycmVjdDogYm9vbGVhbiA9IGNvcnJlY3Rfb3B0aW9uID09IGZpbmFsX3VzZXJfZGVjaXNpb25cblxuICAgIGxldCBhaV9pc19jb3JyZWN0OiBib29sZWFuID0gcXVlc3Rpb24hW1wiYWlfaXNfY29ycmVjdFwiXVxuICAgIGxldCBtZXNzYWdlID0gXCJDb3JyZWN0IGFuc3dlcjogPGI+T3B0aW9uIFwiICsgY29ycmVjdF9vcHRpb24gKyBcIjwvYj4uPGJyPlwiXG4gICAgaWYgKHVzZXJfaXNfY29ycmVjdCkge1xuICAgICAgICBtZXNzYWdlICs9IFwiWW91IHBpY2tlZCBPcHRpb24gXCIgKyBmaW5hbF91c2VyX2RlY2lzaW9uICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfY29ycmVjdCc+PGI+Y29ycmVjdDwvYj48L3NwYW4+Ljxicj5cIlxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWVzc2FnZSArPSBcIllvdSBwaWNrZWQgT3B0aW9uIFwiICsgZmluYWxfdXNlcl9kZWNpc2lvbiArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2luY29ycmVjdCc+PGI+aW5jb3JyZWN0PC9iPjwvc3Bhbj4uPGJyPlwiXG4gICAgfVxuICAgIGlmIChhaV9pc19jb3JyZWN0KSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCJUaGUgQUkgcGlja2VkIE9wdGlvbiBcIiArIHF1ZXN0aW9uIVtcImFpX3ByZWRpY3Rpb25cIl0gKyBcIiwgd2hpY2ggd2FzIDxzcGFuIGNsYXNzPSdjb2xvcl9jb3JyZWN0Jz48Yj5jb3JyZWN0PGI+PC9zcGFuPi48YnI+XCJcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCJUaGUgQUkgcGlja2VkIE9wdGlvbiBcIiArIHF1ZXN0aW9uIVtcImFpX3ByZWRpY3Rpb25cIl0gKyBcIiwgd2hpY2ggd2FzIDxzcGFuIGNsYXNzPSdjb2xvcl9pbmNvcnJlY3QnPjxiPmluY29ycmVjdDwvYj48L3NwYW4+Ljxicj5cIlxuICAgIH1cbiAgICBpZiAodXNlcl9pc19jb3JyZWN0KSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCI8c3BhbiBjbGFzcz0nY29sb3JfY29ycmVjdCc+PGI+WW91IHJlY2VpdmUgYSByZXdhcmQgb2YgJDAuMTAuPC9iPjwvc3Bhbj5cIlxuICAgICAgICBiYWxhbmNlICs9IDAuMVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWVzc2FnZSArPSBcIjxzcGFuIGNsYXNzPSdjb2xvcl9pbmNvcnJlY3QnPjxiPllvdSBkbyBub3QgcmVjZWl2ZSBhbnkgcmV3YXJkLjwvYj48L3NwYW4+XCJcbiAgICB9XG5cbiAgICBtZXNzYWdlICs9IFwiPGJyPlwiXG4gICAgLy9pZiAoc3VjY2Vzcykge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gYFlvdSBnYWluICQkeyhiZXRfdmFsKmJldF92YWxfcmF0aW8pLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlICs9IGJldF92YWwqYmV0X3ZhbF9yYXRpb1xuICAgIC8vfSBlbHNlIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IGBZb3UgbG9zZSAkJHsoYmV0X3ZhbC8xLjApLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlIC09IGJldF92YWwvMS4wXG4gICAgLy8gICAgYmFsYW5jZSA9IE1hdGgubWF4KDAsIGJhbGFuY2UpXG4gICAgLy99XG4gICAgZ2V0X3RydXN0X2VmZmVjdCgpXG5cbiAgICAkKFwiI2JhbGFuY2VcIikudGV4dChgQmFsYW5jZTogJCR7YmFsYW5jZS50b0ZpeGVkKDIpfSArICQxLjBgKVxuICAgICQoXCIjcmVzdWx0X3NwYW5cIikuaHRtbChtZXNzYWdlKVxuICAgIC8vJChcIiNidXR0b25fbmV4dFwiKS5zaG93KClcbiAgICAkKFwiI3Jlc3VsdF9zcGFuXCIpLnNob3coKVxuICAgIC8vJChcIiNidXR0b25fcGxhY2VfYmV0XCIpLmhpZGUoKVxuICAgICQoXCIjaG93X2NvbmZpZGVudF9kaXZcIikuc2hvdygpXG5cbiAgICAvLyQoJyNyYW5nZV92YWwnKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG59XG5cbi8vJChcIiNidXR0b25fcGxhY2VfYmV0XCIpLm9uKFwiY2xpY2tcIiwgc2hvd19yZXN1bHQpXG5cbmZ1bmN0aW9uIG5leHRfcXVlc3Rpb24oKSB7XG4gICAgLy8gcmVzdG9yZSBwcmV2aW91cyBzdGF0ZSBvZiBVSVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24xXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcblxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24xXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24xXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24yXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcblxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24zXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuXG4gICAgJChcIiNhaV9hc3Npc3RhbmNlX2RpdlwiKS5oaWRlKClcbiAgICAkKFwiI2luaXRpYWxfdXNlcl9jb25maWRlbmNlX2RpdlwiKS5oaWRlKClcbiAgICAkKFwiI2ZpbmFsX3VzZXJfZGVjaXNpb25fZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjZmluYWxfdXNlcl9jb25maWRlbmNlX2RpdlwiKS5oaWRlKClcbiAgICAkKCcjcmFuZ2VfdmFsJykucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNob3dfY29uZmlkZW50X2RpdlwiKS5oaWRlKClcbiAgICAkKFwiI2J1dHRvbl9wbGFjZV9iZXRcIikuaGlkZSgpXG4gICAgJChcIiNidXR0b25fbmV4dFwiKS5oaWRlKClcbiAgICAkKFwiI3Jlc3VsdF9zcGFuXCIpLmhpZGUoKVxuICAgIGlmIChxdWVzdGlvbl9pID09IC0xKSB7XG4gICAgICAgICQoXCIjcmFuZ2VfdGV4dFwiKS50ZXh0KFwiLVwiKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJChcIiNyYW5nZV90ZXh0XCIpLnRleHQoYEJlZm9yZSB0aGlzIGludGVyYWN0aW9uLCB5b3VyIHRydXN0IGluIHRoZSBBSTogJHt1c2VyX3RydXN0ICogMTB9IC8gMTAwLmApXG4gICAgfVxuICAgICQoXCIjcmFuZ2VfdmFsXCIpLnZhbCh1c2VyX3RydXN0KVxuXG4gICAgcXVlc3Rpb25faSArPSAxXG4gICAgaWYgKHF1ZXN0aW9uX2kgPj0gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgJChcIiNtYWluX2JveF9leHBlcmltZW50XCIpLmhpZGUoKVxuICAgICAgICBpZiAoTU9DS01PREUpIHtcbiAgICAgICAgICAgICQoXCIjbWFpbl9ib3hfZW5kX21vY2tcIikuc2hvdygpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKFwiI21haW5fYm94X2VuZFwiKS5zaG93KClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgcXVlc3Rpb24gPSBkYXRhW3F1ZXN0aW9uX2ldXG5cbiAgICAkKFwiI3F1ZXN0aW9uX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJxdWVzdGlvblwiXSlcbiAgICAkKFwiI29wdGlvbjFfc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcIm9wdGlvbjFcIl0pXG4gICAgJChcIiNvcHRpb24yX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJvcHRpb24yXCJdKVxuICAgIC8vJChcIiNhaV9wcmVkaWN0aW9uX3NwYW5cIikuaHRtbChcIk9wdGlvbiBcIiArIHF1ZXN0aW9uIVtcImFpX3ByZWRpY3Rpb25cIl0pXG4gICAgLy8kKFwiI2FpX2NvbmZpZGVuY2Vfc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0pXG5cbiAgICAvLyBzZXQgYmV0IHZhbHVlIHJhdGlvXG4gICAgaWYocXVlc3Rpb24uaGFzT3duUHJvcGVydHkoXCJyZXdhcmRfcmF0aW9cIikpIHtcbiAgICAgICAgbGV0IFtyYXRpbzEsIHJhdGlvMl0gPSBxdWVzdGlvbltcInJld2FyZF9yYXRpb1wiXVxuICAgICAgICByYXRpbzEgPSBOdW1iZXIocmF0aW8xKVxuICAgICAgICByYXRpbzIgPSBOdW1iZXIocmF0aW8yKVxuICAgICAgICBiZXRfdmFsX3JhdGlvID0gcmF0aW8xL3JhdGlvMlxuICAgIH0gZWxzZSB7XG4gICAgICAgIGJldF92YWxfcmF0aW8gPSAxXG4gICAgfVxuXG4gICAgdGltZV9xdWVzdGlvbl9zdGFydCA9IERhdGUubm93KClcbiAgICAkKFwiI3Byb2dyZXNzXCIpLnRleHQoYFByb2dyZXNzOiAke3F1ZXN0aW9uX2kgKyAxfSAvICR7ZGF0YS5sZW5ndGh9YClcbn1cblxuLy8gZ2V0IHVzZXIgaWQgYW5kIGxvYWQgcXVldWVcbi8vIHRyeSB0byBzZWUgaWYgc3RhcnQgb3ZlcnJpZGUgd2FzIHBhc3NlZFxuY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbmNvbnN0IHN0YXJ0T3ZlcnJpZGUgPSB1cmxQYXJhbXMuZ2V0KCdzdGFydCcpO1xuY29uc3QgVUlERnJvbVVSTCA9IHVybFBhcmFtcy5nZXQoXCJ1aWRcIilcbmdsb2JhbFRoaXMudXJsX2RhdGEgPSBwYXJhbXNUb09iamVjdCh1cmxQYXJhbXMuZW50cmllcygpKVxuXG5pZiAoVUlERnJvbVVSTCAhPSBudWxsKSB7XG4gICAgZ2xvYmFsVGhpcy51aWQgPSBVSURGcm9tVVJMIGFzIHN0cmluZ1xuICAgIGlmIChnbG9iYWxUaGlzLnVpZCA9PSBcInByb2xpZmljX3JhbmRvbVwiKSB7XG4gICAgICAgIGxldCBxdWV1ZV9pZCA9IGAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKX1gLnBhZFN0YXJ0KDMsIFwiMFwiKVxuICAgICAgICBnbG9iYWxUaGlzLnVpZCA9IGAke3VybFBhcmFtcy5nZXQoXCJwcm9saWZpY19xdWV1ZV9uYW1lXCIpfV8ke3F1ZXVlX2lkfWBcbiAgICB9XG59IGVsc2UgaWYgKERFVk1PREUpIHtcbiAgICBnbG9iYWxUaGlzLnVpZCA9IFwiZGVtb1wiXG59IGVsc2Uge1xuICAgIGxldCBVSURfbWF5YmU6IGFueSA9IG51bGxcbiAgICB3aGlsZSAoVUlEX21heWJlID09IG51bGwpIHtcbiAgICAgICAgVUlEX21heWJlID0gcHJvbXB0KFwiRW50ZXIgeW91ciB1c2VyIGlkLiBQbGVhc2UgZ2V0IGluIHRvdWNoIGlmIHlvdSB3ZXJlIG5vdCBhc3NpZ25lZCBhbiBpZCBidXQgd2lzaCB0byBwYXJ0aWNpcGF0ZSBpbiB0aGlzIGV4cGVyaW1lbnQuXCIpXG4gICAgfVxuICAgIGdsb2JhbFRoaXMudWlkID0gVUlEX21heWJlIVxufVxuXG5jb25zdCB2YWxpZEFJSW50ZXJ2ZW50aW9ucyA9IFtcIm5vbmVcIiwgXCJkdW1teVwiLCBcImNvbmZpZGVuY2VfaW5mbGF0aW9uXCJdXG5sZXQgQUlJbnRlcnZlbnRpb25UeXBlID0gdXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl90eXBlXCIpXG5sZXQgSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkID0gTnVtYmVyKHVybFBhcmFtcy5nZXQoXCJpbnRlcnZlbnRpb25fdGhyZXNob2xkXCIpKVxuaWYgKEFJSW50ZXJ2ZW50aW9uVHlwZSA9PSBudWxsKSB7XG4gICAgQUlJbnRlcnZlbnRpb25UeXBlID0gXCJub25lXCJcbn0gXG5pZiAoSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkID09IG51bGwpIHtcbiAgICBJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQgPSAtMVxufVxuXG4vL0Fzc2VydCB0aGF0IHRoZSBBSUFzc2lzdGFuY2VJbnRlcnZlbnRpb24gaXMgb25lIG9mIHRoZSB2YWxpZCB2YWx1ZXNcbmlmICghdmFsaWRBSUludGVydmVudGlvbnMuaW5jbHVkZXMoQUlJbnRlcnZlbnRpb25UeXBlISkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEFJIEFzc2lzdGFuY2UgSW50ZXJ2ZW50aW9uOiBcIiArIEFJSW50ZXJ2ZW50aW9uVHlwZSlcbn1cbmdsb2JhbFRoaXMudXJsX2RhdGFbXCJpbnRlcnZlbnRpb25fdHlwZVwiXSA9IEFJSW50ZXJ2ZW50aW9uVHlwZVxuZ2xvYmFsVGhpcy51cmxfZGF0YVtcImludGVydmVudGlvbl90aHJlc2hvbGRcIl0gPSBJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGRcblxuLy8gdmVyc2lvbiBmb3IgcGFwZXJcbmlmIChnbG9iYWxUaGlzLnVpZC5zdGFydHNXaXRoKFwiZGVtb19wYXBlclwiKSkge1xuICAgIE1PQ0tNT0RFID0gdHJ1ZVxufSBlbHNlIHtcblxufVxuY29uc29sZS5sb2coXCJSdW5uaW5nIHdpdGggVUlEXCIsIGdsb2JhbFRoaXMudWlkKVxubG9hZF9kYXRhKCkuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgIC8vYWxlcnQoXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coZ2xvYmFsVGhpcy51aWQhKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufVxuKS50aGVuKChuZXdfZGF0YSkgPT4ge1xuICAgIGRhdGEgPSBuZXdfZGF0YVxuICAgIGlmIChzdGFydE92ZXJyaWRlICE9IG51bGwpIHtcbiAgICAgICAgcXVlc3Rpb25faSA9IHBhcnNlSW50KHN0YXJ0T3ZlcnJpZGUpIC0gMVxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGZyb21cIiwgcXVlc3Rpb25faSlcbiAgICB9XG4gICAgLy8gbmV4dF9xdWVzdGlvbigpXG4gICAgbmV4dF9pbnN0cnVjdGlvbnMoMClcbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5zaG93KClcbiAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG59KVxuXG5jb25zb2xlLmxvZyhcIlN0YXJ0aW5nIHNlc3Npb24gd2l0aCBVSUQ6XCIsIGdsb2JhbFRoaXMudWlkISlcblxubGV0IGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG5kb2N1bWVudC5vbnZpc2liaWxpdHljaGFuZ2UgPSAoKSA9PiB7XG4gICAgaWYgKCFhbGVydF9hY3RpdmUpIHtcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgKz0gMVxuICAgICAgICBhbGVydF9hY3RpdmUgPSB0cnVlXG4gICAgICAgIGlmICghKGdsb2JhbFRoaXMudWlkIS5zdGFydHNXaXRoKFwiZGVtb1wiKSkgJiYgIShERVZNT0RFKSkge1xuICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgZG9uJ3QgbGVhdmUgdGhlIHBhZ2UuIElmIHlvdSBkbyBzbyBhZ2Fpbiwgd2UgbWF5IHJlc3RyaWN0IHBheWluZyB5b3UuXCIpXG4gICAgICAgIH1cbiAgICAgICAgYWxlcnRfYWN0aXZlID0gZmFsc2VcbiAgICB9XG59IiwiZnVuY3Rpb24gcGFyYW1zVG9PYmplY3QoZW50cmllcykge1xuICBjb25zdCByZXN1bHQgPSB7fVxuICAvLyBlYWNoICdlbnRyeScgaXMgYSBba2V5LCB2YWx1ZV0gdHVwcGxlXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB7IHBhcmFtc1RvT2JqZWN0IH0iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTRVJWRVJfTE9HX1JPT1QiLCJNT0NLTU9ERSIsIlVTRVJfTU9ERUxTX1JPT1QiLCJ1c2VyX2RlY2lzaW9uX21vZGVsIiwiZGF0YSIsInVzZXJfdHJ1c3QiLCJ0aW1lX3F1ZXN0aW9uX3N0YXJ0IiwidGltZV9maW5hbF9kZWNpc2lvbl9zdGFydCIsInRpbWVfdHJ1c3RfZGVjaXNpb25fc3RhcnQiLCJ0aW1lX2luaXRpYWxfY29uZmlkZW5jZV9zdGFydCIsInRpbWVfZmluYWxfY29uZmlkZW5jZV9zdGFydCIsInF1ZXN0aW9uX2kiLCJxdWVzdGlvbiIsImluaXRpYWxfdXNlcl9kZWNpc2lvbiIsImZpbmFsX3VzZXJfZGVjaXNpb24iLCJpbml0aWFsX3VzZXJfY29uZmlkZW5jZSIsImZpbmFsX3VzZXJfY29uZmlkZW5jZSIsImJhbGFuY2UiLCJiZXRfdmFsX3JhdGlvIiwiaW5zdHJ1Y3Rpb25faSIsImNvdW50X2V4aXRlZF9wYWdlIiwidXNlcl9jdXJyZW50X3RydXN0X2xldmVsIiwiYWlfYXNzaXN0YW5jZV9pbnRlcnZlbnRpb25fZGF0YSIsImludGVydmVudGlvbl9kZXRhaWxzIiwidHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSIsImZpbmRuZXdjb25mX3Jlc3VsdCIsImFzc2VydCIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJuZXh0X2luc3RydWN0aW9ucyIsImluY3JlbWVudCIsIiQiLCJhdHRyIiwicmVtb3ZlQXR0ciIsInNob3ciLCJ2YWwiLCJoaWRlIiwibmV4dF9xdWVzdGlvbiIsImNoaWxkcmVuIiwiZWFjaCIsIl8iLCJlbCIsIm1ha2VfaW5pdGlhbF91c2VyX2RlY2lzaW9uIiwib3B0aW9uIiwiRGF0ZSIsIm5vdyIsImdldF9pbml0aWFsX3VzZXJfY29uZmlkZW5jZSIsImNvbmZfbGV2ZWwiLCJhc3luYyIsImNvbnNvbGUiLCJsb2ciLCJkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSIsIkFJSW50ZXJ2ZW50aW9uVHlwZSIsInJlc3VsdCIsInVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzIiwiTnVtYmVyIiwicmVwbGFjZSIsImFqYXgiLCJKU09OIiwic3RyaW5naWZ5IiwicHJvamVjdCIsIm1vZGVsX25hbWUiLCJwYXlsb2FkIiwidHlwZSIsImNvbnRlbnRUeXBlIiwiZSIsInVzZXJfZGVjaXNpb25fcHJlZF9wcm9icyIsIlgiLCJTdHJpbmciLCJ0b0ZpeGVkIiwiYWxkaWZmX3Jlc3VsdCIsInVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQiLCJ1c2VyX2luaXRpYWxfY29uZmlkZW5jZSIsImFsX2RpZmYiLCJ1c2VyX2FjY2VwdGFuY2VfbGlrZWxpaG9vZF9uZXV0cmFsX3RydXN0IiwiaW50ZXJ2ZW50aW9uX2FwcGxpZWQiLCJJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQiLCJmaW5kbmV3Y29uZl9pbnB1dF92YXJpYWJsZXMiLCJodG1sIiwiZ2V0X2FpX2Fzc2lzdGFuY2UiLCJtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24iLCJnZXRfZmluYWxfdXNlcl9jb25maWRlbmNlIiwiY29ycmVjdF9vcHRpb24iLCJ1c2VyX2lzX2NvcnJlY3QiLCJhaV9pc19jb3JyZWN0IiwidHJ1c3RfZWZmZWN0X2lucHV0cyIsInRydXN0X2VmZmVjdCIsImdldF90cnVzdF9lZmZlY3QiLCJ0ZXh0Iiwic2hvd19yZXN1bHQiLCJsZW5ndGgiLCJyYXRpbzEiLCJyYXRpbzIiLCJvbiIsImxvZ2dlZF9kYXRhIiwiZ2xvYmFsVGhpcyIsInVybF9kYXRhIiwidWlkIiwibG9nX2RhdGEiLCJ0aGlzIiwidXJsUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdGFydE92ZXJyaWRlIiwiVUlERnJvbVVSTCIsImVudHJpZXMiLCJ2YWx1ZSIsInBhcmFtc1RvT2JqZWN0IiwicXVldWVfaWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwYWRTdGFydCIsIlVJRF9tYXliZSIsInByb21wdCIsImluY2x1ZGVzIiwiRXJyb3IiLCJzdGFydHNXaXRoIiwiZ2V0SlNPTiIsImxvYWRfZGF0YSIsImNhdGNoIiwiX2Vycm9yIiwicmVsb2FkIiwidGhlbiIsIm5ld19kYXRhIiwicGFyc2VJbnQiLCJhbGVydF9hY3RpdmUiLCJkb2N1bWVudCIsIm9udmlzaWJpbGl0eWNoYW5nZSIsImFsZXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==